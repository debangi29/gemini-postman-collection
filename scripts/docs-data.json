{
  "title": "Generative Language API",
  "version": "v1beta",
  "description": "The Gemini API allows developers to build generative AI applications using Gemini models. Gemini is our most capable model, built from the ground up to be multimodal. It can generalize and seamlessly understand, operate across, and combine different types of information including language, images, audio, video, and code. You can use the Gemini API for use cases like reasoning across text and images, content generation, dialogue agents, summarization and classification systems, and more.",
  "basePath": "",
  "docLink": "https://developers.generativeai.google/api",
  "models": [
    {
      "name": "gemini-1.5-pro-latest",
      "description": "Latest version of Gemini 1.5 Pro",
      "maxTokens": 8192,
      "capabilities": [
        "text",
        "code",
        "chat",
        "function-calling"
      ],
      "endpoints": [
        {
          "name": "generateContent",
          "path": "v1beta/{+model}:generateContent",
          "description": "Generates a model response given an input `GenerateContentRequest`. Refer to the [text generation guide](https://ai.google.dev/gemini-api/docs/text-generation) for detailed usage information. Input capabilities differ between models, including tuned models. Refer to the [model guide](https://ai.google.dev/gemini-api/docs/models/gemini) and [tuning guide](https://ai.google.dev/gemini-api/docs/model-tuning) for details.",
          "httpMethod": "POST",
          "parameters": [
            {
              "name": "model",
              "type": "string",
              "description": "Required. The name of the `Model` to use for generating the completion. Format: `models/{model}`.",
              "required": true,
              "location": "path"
            }
          ],
          "responses": [
            {
              "status": 200,
              "description": "Successful response",
              "schema": {
                "$ref": "GenerateContentResponse"
              }
            }
          ]
        },
        {
          "name": "generateContent",
          "path": "v1beta/{+model}:generateContent",
          "description": "Generates a model response given an input `GenerateContentRequest`. Refer to the [text generation guide](https://ai.google.dev/gemini-api/docs/text-generation) for detailed usage information. Input capabilities differ between models, including tuned models. Refer to the [model guide](https://ai.google.dev/gemini-api/docs/models/gemini) and [tuning guide](https://ai.google.dev/gemini-api/docs/model-tuning) for details.",
          "httpMethod": "POST",
          "parameters": [
            {
              "name": "model",
              "type": "string",
              "description": "Required. The name of the `Model` to use for generating the completion. Format: `models/{model}`.",
              "required": true,
              "location": "path"
            }
          ],
          "responses": [
            {
              "status": 200,
              "description": "Successful response",
              "schema": {
                "$ref": "GenerateContentResponse"
              }
            }
          ]
        },
        {
          "name": "embedContent",
          "path": "v1beta/{+model}:embedContent",
          "description": "Generates a text embedding vector from the input `Content` using the specified [Gemini Embedding model](https://ai.google.dev/gemini-api/docs/models/gemini#text-embedding).",
          "httpMethod": "POST",
          "parameters": [
            {
              "name": "model",
              "type": "string",
              "description": "Required. The model's resource name. This serves as an ID for the Model to use. This name should match a model name returned by the `ListModels` method. Format: `models/{model}`",
              "required": true,
              "location": "path"
            }
          ],
          "responses": [
            {
              "status": 200,
              "description": "Successful response",
              "schema": {
                "$ref": "EmbedContentResponse"
              }
            }
          ]
        },
        {
          "name": "generateContent",
          "path": "v1beta/{+model}:generateContent",
          "description": "Generates a model response given an input `GenerateContentRequest`. Refer to the [text generation guide](https://ai.google.dev/gemini-api/docs/text-generation) for detailed usage information. Input capabilities differ between models, including tuned models. Refer to the [model guide](https://ai.google.dev/gemini-api/docs/models/gemini) and [tuning guide](https://ai.google.dev/gemini-api/docs/model-tuning) for details.",
          "httpMethod": "POST",
          "parameters": [
            {
              "name": "model",
              "type": "string",
              "description": "Required. The name of the `Model` to use for generating the completion. Format: `models/{model}`.",
              "required": true,
              "location": "path"
            }
          ],
          "responses": [
            {
              "status": 200,
              "description": "Successful response",
              "schema": {
                "$ref": "GenerateContentResponse"
              }
            }
          ]
        }
      ]
    },
    {
      "name": "gemini-1.5-flash-latest",
      "description": "Latest version of Gemini 1.5 Flash",
      "maxTokens": 8192,
      "capabilities": [
        "text",
        "code",
        "chat",
        "function-calling"
      ],
      "endpoints": [
        {
          "name": "generateContent",
          "path": "v1beta/{+model}:generateContent",
          "description": "Generates a model response given an input `GenerateContentRequest`. Refer to the [text generation guide](https://ai.google.dev/gemini-api/docs/text-generation) for detailed usage information. Input capabilities differ between models, including tuned models. Refer to the [model guide](https://ai.google.dev/gemini-api/docs/models/gemini) and [tuning guide](https://ai.google.dev/gemini-api/docs/model-tuning) for details.",
          "httpMethod": "POST",
          "parameters": [
            {
              "name": "model",
              "type": "string",
              "description": "Required. The name of the `Model` to use for generating the completion. Format: `models/{model}`.",
              "required": true,
              "location": "path"
            }
          ],
          "responses": [
            {
              "status": 200,
              "description": "Successful response",
              "schema": {
                "$ref": "GenerateContentResponse"
              }
            }
          ]
        },
        {
          "name": "generateContent",
          "path": "v1beta/{+model}:generateContent",
          "description": "Generates a model response given an input `GenerateContentRequest`. Refer to the [text generation guide](https://ai.google.dev/gemini-api/docs/text-generation) for detailed usage information. Input capabilities differ between models, including tuned models. Refer to the [model guide](https://ai.google.dev/gemini-api/docs/models/gemini) and [tuning guide](https://ai.google.dev/gemini-api/docs/model-tuning) for details.",
          "httpMethod": "POST",
          "parameters": [
            {
              "name": "model",
              "type": "string",
              "description": "Required. The name of the `Model` to use for generating the completion. Format: `models/{model}`.",
              "required": true,
              "location": "path"
            }
          ],
          "responses": [
            {
              "status": 200,
              "description": "Successful response",
              "schema": {
                "$ref": "GenerateContentResponse"
              }
            }
          ]
        },
        {
          "name": "embedContent",
          "path": "v1beta/{+model}:embedContent",
          "description": "Generates a text embedding vector from the input `Content` using the specified [Gemini Embedding model](https://ai.google.dev/gemini-api/docs/models/gemini#text-embedding).",
          "httpMethod": "POST",
          "parameters": [
            {
              "name": "model",
              "type": "string",
              "description": "Required. The model's resource name. This serves as an ID for the Model to use. This name should match a model name returned by the `ListModels` method. Format: `models/{model}`",
              "required": true,
              "location": "path"
            }
          ],
          "responses": [
            {
              "status": 200,
              "description": "Successful response",
              "schema": {
                "$ref": "EmbedContentResponse"
              }
            }
          ]
        },
        {
          "name": "generateContent",
          "path": "v1beta/{+model}:generateContent",
          "description": "Generates a model response given an input `GenerateContentRequest`. Refer to the [text generation guide](https://ai.google.dev/gemini-api/docs/text-generation) for detailed usage information. Input capabilities differ between models, including tuned models. Refer to the [model guide](https://ai.google.dev/gemini-api/docs/models/gemini) and [tuning guide](https://ai.google.dev/gemini-api/docs/model-tuning) for details.",
          "httpMethod": "POST",
          "parameters": [
            {
              "name": "model",
              "type": "string",
              "description": "Required. The name of the `Model` to use for generating the completion. Format: `models/{model}`.",
              "required": true,
              "location": "path"
            }
          ],
          "responses": [
            {
              "status": 200,
              "description": "Successful response",
              "schema": {
                "$ref": "GenerateContentResponse"
              }
            }
          ]
        }
      ]
    },
    {
      "name": "gemini-2.0-flash-exp-image-generation",
      "description": "Experimental Gemini 2.0 Flash model for image generation",
      "maxTokens": 4096,
      "capabilities": [
        "text",
        "image-generation"
      ],
      "endpoints": [
        {
          "name": "generateContent",
          "path": "v1beta/{+model}:generateContent",
          "description": "Generates a model response given an input `GenerateContentRequest`. Refer to the [text generation guide](https://ai.google.dev/gemini-api/docs/text-generation) for detailed usage information. Input capabilities differ between models, including tuned models. Refer to the [model guide](https://ai.google.dev/gemini-api/docs/models/gemini) and [tuning guide](https://ai.google.dev/gemini-api/docs/model-tuning) for details.",
          "httpMethod": "POST",
          "parameters": [
            {
              "name": "model",
              "type": "string",
              "description": "Required. The name of the `Model` to use for generating the completion. Format: `models/{model}`.",
              "required": true,
              "location": "path"
            }
          ],
          "responses": [
            {
              "status": 200,
              "description": "Successful response",
              "schema": {
                "$ref": "GenerateContentResponse"
              }
            }
          ]
        },
        {
          "name": "generateContent",
          "path": "v1beta/{+model}:generateContent",
          "description": "Generates a model response given an input `GenerateContentRequest`. Refer to the [text generation guide](https://ai.google.dev/gemini-api/docs/text-generation) for detailed usage information. Input capabilities differ between models, including tuned models. Refer to the [model guide](https://ai.google.dev/gemini-api/docs/models/gemini) and [tuning guide](https://ai.google.dev/gemini-api/docs/model-tuning) for details.",
          "httpMethod": "POST",
          "parameters": [
            {
              "name": "model",
              "type": "string",
              "description": "Required. The name of the `Model` to use for generating the completion. Format: `models/{model}`.",
              "required": true,
              "location": "path"
            }
          ],
          "responses": [
            {
              "status": 200,
              "description": "Successful response",
              "schema": {
                "$ref": "GenerateContentResponse"
              }
            }
          ]
        },
        {
          "name": "embedContent",
          "path": "v1beta/{+model}:embedContent",
          "description": "Generates a text embedding vector from the input `Content` using the specified [Gemini Embedding model](https://ai.google.dev/gemini-api/docs/models/gemini#text-embedding).",
          "httpMethod": "POST",
          "parameters": [
            {
              "name": "model",
              "type": "string",
              "description": "Required. The model's resource name. This serves as an ID for the Model to use. This name should match a model name returned by the `ListModels` method. Format: `models/{model}`",
              "required": true,
              "location": "path"
            }
          ],
          "responses": [
            {
              "status": 200,
              "description": "Successful response",
              "schema": {
                "$ref": "EmbedContentResponse"
              }
            }
          ]
        },
        {
          "name": "generateContent",
          "path": "v1beta/{+model}:generateContent",
          "description": "Generates a model response given an input `GenerateContentRequest`. Refer to the [text generation guide](https://ai.google.dev/gemini-api/docs/text-generation) for detailed usage information. Input capabilities differ between models, including tuned models. Refer to the [model guide](https://ai.google.dev/gemini-api/docs/models/gemini) and [tuning guide](https://ai.google.dev/gemini-api/docs/model-tuning) for details.",
          "httpMethod": "POST",
          "parameters": [
            {
              "name": "model",
              "type": "string",
              "description": "Required. The name of the `Model` to use for generating the completion. Format: `models/{model}`.",
              "required": true,
              "location": "path"
            }
          ],
          "responses": [
            {
              "status": 200,
              "description": "Successful response",
              "schema": {
                "$ref": "GenerateContentResponse"
              }
            }
          ]
        }
      ]
    },
    {
      "name": "gemini-1.5-pro-002",
      "description": "Gemini 1.5-pro-002 model for image with text analysis",
      "maxTokens": 8192,
      "capabilities": [
        "text"
      ],
      "endpoints": [
        {
          "name": "generateContent",
          "path": "v1beta/{+model}:generateContent",
          "description": "Generates a model response given an input `GenerateContentRequest`. Refer to the [text generation guide](https://ai.google.dev/gemini-api/docs/text-generation) for detailed usage information. Input capabilities differ between models, including tuned models. Refer to the [model guide](https://ai.google.dev/gemini-api/docs/models/gemini) and [tuning guide](https://ai.google.dev/gemini-api/docs/model-tuning) for details.",
          "httpMethod": "POST",
          "parameters": [
            {
              "name": "model",
              "type": "string",
              "description": "Required. The name of the `Model` to use for generating the completion. Format: `models/{model}`.",
              "required": true,
              "location": "path"
            }
          ],
          "responses": [
            {
              "status": 200,
              "description": "Successful response",
              "schema": {
                "$ref": "GenerateContentResponse"
              }
            }
          ]
        },
        {
          "name": "generateContent",
          "path": "v1beta/{+model}:generateContent",
          "description": "Generates a model response given an input `GenerateContentRequest`. Refer to the [text generation guide](https://ai.google.dev/gemini-api/docs/text-generation) for detailed usage information. Input capabilities differ between models, including tuned models. Refer to the [model guide](https://ai.google.dev/gemini-api/docs/models/gemini) and [tuning guide](https://ai.google.dev/gemini-api/docs/model-tuning) for details.",
          "httpMethod": "POST",
          "parameters": [
            {
              "name": "model",
              "type": "string",
              "description": "Required. The name of the `Model` to use for generating the completion. Format: `models/{model}`.",
              "required": true,
              "location": "path"
            }
          ],
          "responses": [
            {
              "status": 200,
              "description": "Successful response",
              "schema": {
                "$ref": "GenerateContentResponse"
              }
            }
          ]
        },
        {
          "name": "embedContent",
          "path": "v1beta/{+model}:embedContent",
          "description": "Generates a text embedding vector from the input `Content` using the specified [Gemini Embedding model](https://ai.google.dev/gemini-api/docs/models/gemini#text-embedding).",
          "httpMethod": "POST",
          "parameters": [
            {
              "name": "model",
              "type": "string",
              "description": "Required. The model's resource name. This serves as an ID for the Model to use. This name should match a model name returned by the `ListModels` method. Format: `models/{model}`",
              "required": true,
              "location": "path"
            }
          ],
          "responses": [
            {
              "status": 200,
              "description": "Successful response",
              "schema": {
                "$ref": "EmbedContentResponse"
              }
            }
          ]
        },
        {
          "name": "generateContent",
          "path": "v1beta/{+model}:generateContent",
          "description": "Generates a model response given an input `GenerateContentRequest`. Refer to the [text generation guide](https://ai.google.dev/gemini-api/docs/text-generation) for detailed usage information. Input capabilities differ between models, including tuned models. Refer to the [model guide](https://ai.google.dev/gemini-api/docs/models/gemini) and [tuning guide](https://ai.google.dev/gemini-api/docs/model-tuning) for details.",
          "httpMethod": "POST",
          "parameters": [
            {
              "name": "model",
              "type": "string",
              "description": "Required. The name of the `Model` to use for generating the completion. Format: `models/{model}`.",
              "required": true,
              "location": "path"
            }
          ],
          "responses": [
            {
              "status": 200,
              "description": "Successful response",
              "schema": {
                "$ref": "GenerateContentResponse"
              }
            }
          ]
        }
      ]
    },
    {
      "name": "gemini-2.0-flash-001",
      "description": "Gemini 2.0-flash-001 model for coding capabilities",
      "maxTokens": 8192,
      "capabilities": [
        "code"
      ],
      "endpoints": []
    },
    {
      "name": "gemini-2.0-pro-exp",
      "description": "Gemini 2.0-pro-experimental model for text generation capabilities",
      "maxTokens": 8192,
      "capabilities": [
        "text"
      ],
      "endpoints": [
        {
          "name": "generateContent",
          "path": "v1beta/{+model}:generateContent",
          "description": "Generates a model response given an input `GenerateContentRequest`. Refer to the [text generation guide](https://ai.google.dev/gemini-api/docs/text-generation) for detailed usage information. Input capabilities differ between models, including tuned models. Refer to the [model guide](https://ai.google.dev/gemini-api/docs/models/gemini) and [tuning guide](https://ai.google.dev/gemini-api/docs/model-tuning) for details.",
          "httpMethod": "POST",
          "parameters": [
            {
              "name": "model",
              "type": "string",
              "description": "Required. The name of the `Model` to use for generating the completion. Format: `models/{model}`.",
              "required": true,
              "location": "path"
            }
          ],
          "responses": [
            {
              "status": 200,
              "description": "Successful response",
              "schema": {
                "$ref": "GenerateContentResponse"
              }
            }
          ]
        },
        {
          "name": "generateContent",
          "path": "v1beta/{+model}:generateContent",
          "description": "Generates a model response given an input `GenerateContentRequest`. Refer to the [text generation guide](https://ai.google.dev/gemini-api/docs/text-generation) for detailed usage information. Input capabilities differ between models, including tuned models. Refer to the [model guide](https://ai.google.dev/gemini-api/docs/models/gemini) and [tuning guide](https://ai.google.dev/gemini-api/docs/model-tuning) for details.",
          "httpMethod": "POST",
          "parameters": [
            {
              "name": "model",
              "type": "string",
              "description": "Required. The name of the `Model` to use for generating the completion. Format: `models/{model}`.",
              "required": true,
              "location": "path"
            }
          ],
          "responses": [
            {
              "status": 200,
              "description": "Successful response",
              "schema": {
                "$ref": "GenerateContentResponse"
              }
            }
          ]
        },
        {
          "name": "embedContent",
          "path": "v1beta/{+model}:embedContent",
          "description": "Generates a text embedding vector from the input `Content` using the specified [Gemini Embedding model](https://ai.google.dev/gemini-api/docs/models/gemini#text-embedding).",
          "httpMethod": "POST",
          "parameters": [
            {
              "name": "model",
              "type": "string",
              "description": "Required. The model's resource name. This serves as an ID for the Model to use. This name should match a model name returned by the `ListModels` method. Format: `models/{model}`",
              "required": true,
              "location": "path"
            }
          ],
          "responses": [
            {
              "status": 200,
              "description": "Successful response",
              "schema": {
                "$ref": "EmbedContentResponse"
              }
            }
          ]
        },
        {
          "name": "generateContent",
          "path": "v1beta/{+model}:generateContent",
          "description": "Generates a model response given an input `GenerateContentRequest`. Refer to the [text generation guide](https://ai.google.dev/gemini-api/docs/text-generation) for detailed usage information. Input capabilities differ between models, including tuned models. Refer to the [model guide](https://ai.google.dev/gemini-api/docs/models/gemini) and [tuning guide](https://ai.google.dev/gemini-api/docs/model-tuning) for details.",
          "httpMethod": "POST",
          "parameters": [
            {
              "name": "model",
              "type": "string",
              "description": "Required. The name of the `Model` to use for generating the completion. Format: `models/{model}`.",
              "required": true,
              "location": "path"
            }
          ],
          "responses": [
            {
              "status": 200,
              "description": "Successful response",
              "schema": {
                "$ref": "GenerateContentResponse"
              }
            }
          ]
        }
      ]
    },
    {
      "name": "gemini-2.0-flash-lite-001",
      "description": "Gemini 2.0-flash-lite-001 model for chatting capabilities",
      "maxTokens": 8192,
      "capabilities": [
        "chat"
      ],
      "endpoints": []
    }
  ],
  "schemas": {
    "ListTunedModelsResponse": {
      "type": "object",
      "id": "ListTunedModelsResponse",
      "properties": {
        "nextPageToken": {
          "description": "A token, which can be sent as `page_token` to retrieve the next page. If this field is omitted, there are no more pages.",
          "type": "string"
        },
        "tunedModels": {
          "items": {
            "$ref": "TunedModel"
          },
          "type": "array",
          "description": "The returned Models."
        }
      },
      "description": "Response from `ListTunedModels` containing a paginated list of Models."
    },
    "GenerateContentBatchOutput": {
      "properties": {
        "responsesFile": {
          "readOnly": true,
          "type": "string",
          "description": "Output only. The file ID of the file containing the responses. The file will be a JSONL file with a single response per line. The responses will be `GenerateContentResponse` messages formatted as JSON. The responses will be written in the same order as the input requests."
        },
        "inlinedResponses": {
          "readOnly": true,
          "$ref": "InlinedResponses",
          "description": "Output only. The responses to the requests in the batch. Returned when the batch was built using inlined requests. The responses will be in the same order as the input requests."
        }
      },
      "description": "The output of a batch request. This is returned in the `BatchGenerateContentResponse` or the `GenerateContentBatch.output` field.",
      "id": "GenerateContentBatchOutput",
      "type": "object"
    },
    "QueryDocumentRequest": {
      "type": "object",
      "id": "QueryDocumentRequest",
      "properties": {
        "query": {
          "type": "string",
          "description": "Required. Query string to perform semantic search."
        },
        "metadataFilters": {
          "description": "Optional. Filter for `Chunk` metadata. Each `MetadataFilter` object should correspond to a unique key. Multiple `MetadataFilter` objects are joined by logical \"AND\"s. Note: `Document`-level filtering is not supported for this request because a `Document` name is already specified. Example query: (year >= 2020 OR year < 2010) AND (genre = drama OR genre = action) `MetadataFilter` object list: metadata_filters = [ {key = \"chunk.custom_metadata.year\" conditions = [{int_value = 2020, operation = GREATER_EQUAL}, {int_value = 2010, operation = LESS}}, {key = \"chunk.custom_metadata.genre\" conditions = [{string_value = \"drama\", operation = EQUAL}, {string_value = \"action\", operation = EQUAL}}] Example query for a numeric range of values: (year > 2015 AND year <= 2020) `MetadataFilter` object list: metadata_filters = [ {key = \"chunk.custom_metadata.year\" conditions = [{int_value = 2015, operation = GREATER}]}, {key = \"chunk.custom_metadata.year\" conditions = [{int_value = 2020, operation = LESS_EQUAL}]}] Note: \"AND\"s for the same key are only supported for numeric values. String values only support \"OR\"s for the same key.",
          "type": "array",
          "items": {
            "$ref": "MetadataFilter"
          }
        },
        "resultsCount": {
          "description": "Optional. The maximum number of `Chunk`s to return. The service may return fewer `Chunk`s. If unspecified, at most 10 `Chunk`s will be returned. The maximum specified result count is 100.",
          "type": "integer",
          "format": "int32"
        }
      },
      "description": "Request for querying a `Document`."
    },
    "AsyncBatchEmbedContentRequest": {
      "properties": {
        "batch": {
          "$ref": "EmbedContentBatch",
          "description": "Required. The batch to create."
        }
      },
      "id": "AsyncBatchEmbedContentRequest",
      "description": "Request for an `AsyncBatchEmbedContent` operation.",
      "type": "object"
    },
    "GroundingMetadata": {
      "properties": {
        "searchEntryPoint": {
          "description": "Optional. Google search entry for the following-up web searches.",
          "$ref": "SearchEntryPoint"
        },
        "webSearchQueries": {
          "items": {
            "type": "string"
          },
          "description": "Web search queries for the following-up web search.",
          "type": "array"
        },
        "retrievalMetadata": {
          "$ref": "RetrievalMetadata",
          "description": "Metadata related to retrieval in the grounding flow."
        },
        "groundingChunks": {
          "items": {
            "$ref": "GroundingChunk"
          },
          "type": "array",
          "description": "List of supporting references retrieved from specified grounding source."
        },
        "groundingSupports": {
          "type": "array",
          "items": {
            "$ref": "GroundingSupport"
          },
          "description": "List of grounding support."
        },
        "googleMapsWidgetContextToken": {
          "description": "Optional. Resource name of the Google Maps widget context token that can be used with the PlacesContextElement widget in order to render contextual data. Only populated in the case that grounding with Google Maps is enabled.",
          "type": "string"
        }
      },
      "description": "Metadata returned to client when grounding is enabled.",
      "type": "object",
      "id": "GroundingMetadata"
    },
    "PredictLongRunningRequest": {
      "type": "object",
      "id": "PredictLongRunningRequest",
      "properties": {
        "parameters": {
          "type": "any",
          "description": "Optional. The parameters that govern the prediction call."
        },
        "instances": {
          "type": "array",
          "description": "Required. The instances that are the input to the prediction call.",
          "items": {
            "type": "any"
          }
        }
      },
      "description": "Request message for [PredictionService.PredictLongRunning]."
    },
    "EmbedContentRequest": {
      "description": "Request containing the `Content` for the model to embed.",
      "type": "object",
      "id": "EmbedContentRequest",
      "properties": {
        "taskType": {
          "type": "string",
          "enumDescriptions": [
            "Unset value, which will default to one of the other enum values.",
            "Specifies the given text is a query in a search/retrieval setting.",
            "Specifies the given text is a document from the corpus being searched.",
            "Specifies the given text will be used for STS.",
            "Specifies that the given text will be classified.",
            "Specifies that the embeddings will be used for clustering.",
            "Specifies that the given text will be used for question answering.",
            "Specifies that the given text will be used for fact verification.",
            "Specifies that the given text will be used for code retrieval."
          ],
          "description": "Optional. Optional task type for which the embeddings will be used. Not supported on earlier models (`models/embedding-001`).",
          "enum": [
            "TASK_TYPE_UNSPECIFIED",
            "RETRIEVAL_QUERY",
            "RETRIEVAL_DOCUMENT",
            "SEMANTIC_SIMILARITY",
            "CLASSIFICATION",
            "CLUSTERING",
            "QUESTION_ANSWERING",
            "FACT_VERIFICATION",
            "CODE_RETRIEVAL_QUERY"
          ]
        },
        "content": {
          "$ref": "Content",
          "description": "Required. The content to embed. Only the `parts.text` fields will be counted."
        },
        "model": {
          "type": "string",
          "description": "Required. The model's resource name. This serves as an ID for the Model to use. This name should match a model name returned by the `ListModels` method. Format: `models/{model}`"
        },
        "title": {
          "description": "Optional. An optional title for the text. Only applicable when TaskType is `RETRIEVAL_DOCUMENT`. Note: Specifying a `title` for `RETRIEVAL_DOCUMENT` provides better quality embeddings for retrieval.",
          "type": "string"
        },
        "outputDimensionality": {
          "format": "int32",
          "description": "Optional. Optional reduced dimension for the output embedding. If set, excessive values in the output embedding are truncated from the end. Supported by newer models since 2024 only. You cannot set this value if using the earlier model (`models/embedding-001`).",
          "type": "integer"
        }
      }
    },
    "CreateFileRequest": {
      "description": "Request for `CreateFile`.",
      "type": "object",
      "id": "CreateFileRequest",
      "properties": {
        "file": {
          "description": "Optional. Metadata for the file to create.",
          "$ref": "File"
        }
      }
    },
    "BatchCreateChunksResponse": {
      "type": "object",
      "properties": {
        "chunks": {
          "description": "`Chunk`s created.",
          "items": {
            "$ref": "Chunk"
          },
          "type": "array"
        }
      },
      "description": "Response from `BatchCreateChunks` containing a list of created `Chunk`s.",
      "id": "BatchCreateChunksResponse"
    },
    "Web": {
      "description": "Chunk from the web.",
      "properties": {
        "uri": {
          "type": "string",
          "description": "URI reference of the chunk."
        },
        "title": {
          "type": "string",
          "description": "Title of the chunk."
        }
      },
      "type": "object",
      "id": "Web"
    },
    "ListCorporaResponse": {
      "description": "Response from `ListCorpora` containing a paginated list of `Corpora`. The results are sorted by ascending `corpus.create_time`.",
      "type": "object",
      "properties": {
        "nextPageToken": {
          "description": "A token, which can be sent as `page_token` to retrieve the next page. If this field is omitted, there are no more pages.",
          "type": "string"
        },
        "corpora": {
          "type": "array",
          "items": {
            "$ref": "Corpus"
          },
          "description": "The returned corpora."
        }
      },
      "id": "ListCorporaResponse"
    },
    "CreateFileResponse": {
      "type": "object",
      "properties": {
        "file": {
          "$ref": "File",
          "description": "Metadata for the created file."
        }
      },
      "id": "CreateFileResponse",
      "description": "Response for `CreateFile`."
    },
    "CustomMetadata": {
      "properties": {
        "stringValue": {
          "type": "string",
          "description": "The string value of the metadata to store."
        },
        "key": {
          "type": "string",
          "description": "Required. The key of the metadata to store."
        },
        "numericValue": {
          "type": "number",
          "description": "The numeric value of the metadata to store.",
          "format": "float"
        },
        "stringListValue": {
          "$ref": "StringList",
          "description": "The StringList value of the metadata to store."
        }
      },
      "id": "CustomMetadata",
      "description": "User provided metadata stored as key-value pairs.",
      "type": "object"
    },
    "EmbedContentBatchStats": {
      "id": "EmbedContentBatchStats",
      "type": "object",
      "description": "Stats about the batch.",
      "properties": {
        "pendingRequestCount": {
          "description": "Output only. The number of requests that are still pending processing.",
          "format": "int64",
          "type": "string",
          "readOnly": true
        },
        "requestCount": {
          "description": "Output only. The number of requests in the batch.",
          "type": "string",
          "format": "int64",
          "readOnly": true
        },
        "successfulRequestCount": {
          "description": "Output only. The number of requests that were successfully processed.",
          "format": "int64",
          "type": "string",
          "readOnly": true
        },
        "failedRequestCount": {
          "readOnly": true,
          "format": "int64",
          "type": "string",
          "description": "Output only. The number of requests that failed to be processed."
        }
      }
    },
    "Example": {
      "description": "An input/output example used to instruct the Model. It demonstrates how the model should respond or format its response.",
      "properties": {
        "input": {
          "$ref": "Message",
          "description": "Required. An example of an input `Message` from the user."
        },
        "output": {
          "description": "Required. An example of what the model should output given the input.",
          "$ref": "Message"
        }
      },
      "id": "Example",
      "type": "object"
    },
    "VideoMetadata": {
      "properties": {
        "startOffset": {
          "description": "Optional. The start offset of the video.",
          "type": "string",
          "format": "google-duration"
        },
        "endOffset": {
          "type": "string",
          "format": "google-duration",
          "description": "Optional. The end offset of the video."
        },
        "fps": {
          "description": "Optional. The frame rate of the video sent to the model. If not specified, the default value will be 1.0. The fps range is (0.0, 24.0].",
          "type": "number",
          "format": "double"
        }
      },
      "type": "object",
      "description": "Metadata describes the input video content.",
      "id": "VideoMetadata"
    },
    "LogprobsResult": {
      "properties": {
        "logProbabilitySum": {
          "format": "float",
          "type": "number",
          "description": "Sum of log probabilities for all tokens."
        },
        "chosenCandidates": {
          "items": {
            "$ref": "LogprobsResultCandidate"
          },
          "description": "Length = total number of decoding steps. The chosen candidates may or may not be in top_candidates.",
          "type": "array"
        },
        "topCandidates": {
          "type": "array",
          "description": "Length = total number of decoding steps.",
          "items": {
            "$ref": "TopCandidates"
          }
        }
      },
      "description": "Logprobs Result",
      "type": "object",
      "id": "LogprobsResult"
    },
    "ReviewSnippet": {
      "description": "Encapsulates a snippet of a user review that answers a question about the features of a specific place in Google Maps.",
      "properties": {
        "googleMapsUri": {
          "description": "A link that corresponds to the user review on Google Maps.",
          "type": "string"
        },
        "title": {
          "description": "Title of the review.",
          "type": "string"
        },
        "reviewId": {
          "description": "The ID of the review snippet.",
          "type": "string"
        }
      },
      "id": "ReviewSnippet",
      "type": "object"
    },
    "BatchUpdateChunksRequest": {
      "properties": {
        "requests": {
          "description": "Required. The request messages specifying the `Chunk`s to update. A maximum of 100 `Chunk`s can be updated in a batch.",
          "items": {
            "$ref": "UpdateChunkRequest"
          },
          "type": "array"
        }
      },
      "description": "Request to batch update `Chunk`s.",
      "type": "object",
      "id": "BatchUpdateChunksRequest"
    },
    "TuningExample": {
      "type": "object",
      "properties": {
        "textInput": {
          "type": "string",
          "description": "Optional. Text model input."
        },
        "output": {
          "description": "Required. The expected model output.",
          "type": "string"
        }
      },
      "id": "TuningExample",
      "description": "A single example for tuning."
    },
    "ListCachedContentsResponse": {
      "description": "Response with CachedContents list.",
      "properties": {
        "nextPageToken": {
          "description": "A token, which can be sent as `page_token` to retrieve the next page. If this field is omitted, there are no subsequent pages.",
          "type": "string"
        },
        "cachedContents": {
          "items": {
            "$ref": "CachedContent"
          },
          "type": "array",
          "description": "List of cached contents."
        }
      },
      "type": "object",
      "id": "ListCachedContentsResponse"
    },
    "Blob": {
      "properties": {
        "mimeType": {
          "type": "string",
          "description": "The IANA standard MIME type of the source data. Examples: - image/png - image/jpeg If an unsupported MIME type is provided, an error will be returned. For a complete list of supported types, see [Supported file formats](https://ai.google.dev/gemini-api/docs/prompting_with_media#supported_file_formats)."
        },
        "data": {
          "format": "byte",
          "description": "Raw bytes for media formats.",
          "type": "string"
        }
      },
      "id": "Blob",
      "type": "object",
      "description": "Raw media bytes. Text should not be sent as raw bytes, use the 'text' field."
    },
    "Permission": {
      "description": "Permission resource grants user, group or the rest of the world access to the PaLM API resource (e.g. a tuned model, corpus). A role is a collection of permitted operations that allows users to perform specific actions on PaLM API resources. To make them available to users, groups, or service accounts, you assign roles. When you assign a role, you grant permissions that the role contains. There are three concentric roles. Each role is a superset of the previous role's permitted operations: - reader can use the resource (e.g. tuned model, corpus) for inference - writer has reader's permissions and additionally can edit and share - owner has writer's permissions and additionally can delete",
      "type": "object",
      "id": "Permission",
      "properties": {
        "granteeType": {
          "description": "Optional. Immutable. The type of the grantee.",
          "type": "string",
          "enumDescriptions": [
            "The default value. This value is unused.",
            "Represents a user. When set, you must provide email_address for the user.",
            "Represents a group. When set, you must provide email_address for the group.",
            "Represents access to everyone. No extra information is required."
          ],
          "enum": [
            "GRANTEE_TYPE_UNSPECIFIED",
            "USER",
            "GROUP",
            "EVERYONE"
          ]
        },
        "name": {
          "type": "string",
          "readOnly": true,
          "description": "Output only. Identifier. The permission name. A unique name will be generated on create. Examples: tunedModels/{tuned_model}/permissions/{permission} corpora/{corpus}/permissions/{permission} Output only."
        },
        "role": {
          "description": "Required. The role granted by this permission.",
          "enum": [
            "ROLE_UNSPECIFIED",
            "OWNER",
            "WRITER",
            "READER"
          ],
          "enumDescriptions": [
            "The default value. This value is unused.",
            "Owner can use, update, share and delete the resource.",
            "Writer can use, update and share the resource.",
            "Reader can use the resource."
          ],
          "type": "string"
        },
        "emailAddress": {
          "description": "Optional. Immutable. The email address of the user of group which this permission refers. Field is not set when permission's grantee type is EVERYONE.",
          "type": "string"
        }
      }
    },
    "Maps": {
      "id": "Maps",
      "type": "object",
      "properties": {
        "title": {
          "description": "Title of the place.",
          "type": "string"
        },
        "placeId": {
          "description": "This ID of the place, in `places/{place_id}` format. A user can use this ID to look up that place.",
          "type": "string"
        },
        "placeAnswerSources": {
          "description": "Sources that provide answers about the features of a given place in Google Maps.",
          "$ref": "PlaceAnswerSources"
        },
        "text": {
          "description": "Text description of the place answer.",
          "type": "string"
        },
        "uri": {
          "type": "string",
          "description": "URI reference of the place."
        }
      },
      "description": "A grounding chunk from Google Maps. A Maps chunk corresponds to a single place."
    },
    "InlinedRequests": {
      "id": "InlinedRequests",
      "properties": {
        "requests": {
          "items": {
            "$ref": "InlinedRequest"
          },
          "type": "array",
          "description": "Required. The requests to be processed in the batch."
        }
      },
      "type": "object",
      "description": "The requests to be processed in the batch if provided as part of the batch creation request."
    },
    "FunctionResponsePart": {
      "properties": {
        "inlineData": {
          "description": "Inline media bytes.",
          "$ref": "FunctionResponseBlob"
        }
      },
      "description": "A datatype containing media that is part of a `FunctionResponse` message. A `FunctionResponsePart` consists of data which has an associated datatype. A `FunctionResponsePart` can only contain one of the accepted types in `FunctionResponsePart.data`. A `FunctionResponsePart` must have a fixed IANA MIME type identifying the type and subtype of the media if the `inline_data` field is filled with raw bytes.",
      "id": "FunctionResponsePart",
      "type": "object"
    },
    "UrlContextMetadata": {
      "description": "Metadata related to url context retrieval tool.",
      "properties": {
        "urlMetadata": {
          "type": "array",
          "items": {
            "$ref": "UrlMetadata"
          },
          "description": "List of url context."
        }
      },
      "type": "object",
      "id": "UrlContextMetadata"
    },
    "TransferOwnershipResponse": {
      "description": "Response from `TransferOwnership`.",
      "properties": {},
      "id": "TransferOwnershipResponse",
      "type": "object"
    },
    "SafetyFeedback": {
      "id": "SafetyFeedback",
      "type": "object",
      "properties": {
        "setting": {
          "description": "Safety settings applied to the request.",
          "$ref": "SafetySetting"
        },
        "rating": {
          "description": "Safety rating evaluated from content.",
          "$ref": "SafetyRating"
        }
      },
      "description": "Safety feedback for an entire request. This field is populated if content in the input and/or response is blocked due to safety settings. SafetyFeedback may not exist for every HarmCategory. Each SafetyFeedback will return the safety settings used by the request as well as the lowest HarmProbability that should be allowed in order to return a result."
    },
    "InlinedEmbedContentRequest": {
      "properties": {
        "metadata": {
          "description": "Optional. The metadata to be associated with the request.",
          "additionalProperties": {
            "description": "Properties of the object.",
            "type": "any"
          },
          "type": "object"
        },
        "request": {
          "$ref": "EmbedContentRequest",
          "description": "Required. The request to be processed in the batch."
        }
      },
      "type": "object",
      "id": "InlinedEmbedContentRequest",
      "description": "The request to be processed in the batch."
    },
    "TextCompletion": {
      "description": "Output text returned from a model.",
      "type": "object",
      "id": "TextCompletion",
      "properties": {
        "output": {
          "description": "Output only. The generated text returned from the model.",
          "readOnly": true,
          "type": "string"
        },
        "safetyRatings": {
          "items": {
            "$ref": "SafetyRating"
          },
          "type": "array",
          "description": "Ratings for the safety of a response. There is at most one rating per category."
        },
        "citationMetadata": {
          "readOnly": true,
          "$ref": "CitationMetadata",
          "description": "Output only. Citation information for model-generated `output` in this `TextCompletion`. This field may be populated with attribution information for any text included in the `output`."
        }
      }
    },
    "RetrievalConfig": {
      "description": "Retrieval config.",
      "id": "RetrievalConfig",
      "properties": {
        "languageCode": {
          "type": "string",
          "description": "Optional. The language code of the user. Language code for content. Use language tags defined by [BCP47](https://www.rfc-editor.org/rfc/bcp/bcp47.txt)."
        },
        "latLng": {
          "description": "Optional. The location of the user.",
          "$ref": "LatLng"
        }
      },
      "type": "object"
    },
    "GenerateTextResponse": {
      "properties": {
        "candidates": {
          "description": "Candidate responses from the model.",
          "items": {
            "$ref": "TextCompletion"
          },
          "type": "array"
        },
        "safetyFeedback": {
          "description": "Returns any safety feedback related to content filtering.",
          "type": "array",
          "items": {
            "$ref": "SafetyFeedback"
          }
        },
        "filters": {
          "description": "A set of content filtering metadata for the prompt and response text. This indicates which `SafetyCategory`(s) blocked a candidate from this response, the lowest `HarmProbability` that triggered a block, and the HarmThreshold setting for that category. This indicates the smallest change to the `SafetySettings` that would be necessary to unblock at least 1 response. The blocking is configured by the `SafetySettings` in the request (or the default `SafetySettings` of the API).",
          "items": {
            "$ref": "ContentFilter"
          },
          "type": "array"
        }
      },
      "id": "GenerateTextResponse",
      "type": "object",
      "description": "The response from the model, including candidate completions."
    },
    "SearchEntryPoint": {
      "id": "SearchEntryPoint",
      "type": "object",
      "description": "Google search entry point.",
      "properties": {
        "renderedContent": {
          "description": "Optional. Web content snippet that can be embedded in a web page or an app webview.",
          "type": "string"
        },
        "sdkBlob": {
          "format": "byte",
          "description": "Optional. Base64 encoded JSON representing array of tuple.",
          "type": "string"
        }
      }
    },
    "GroundingPassageId": {
      "type": "object",
      "description": "Identifier for a part within a `GroundingPassage`.",
      "properties": {
        "partIndex": {
          "readOnly": true,
          "format": "int32",
          "description": "Output only. Index of the part within the `GenerateAnswerRequest`'s `GroundingPassage.content`.",
          "type": "integer"
        },
        "passageId": {
          "description": "Output only. ID of the passage matching the `GenerateAnswerRequest`'s `GroundingPassage.id`.",
          "type": "string",
          "readOnly": true
        }
      },
      "id": "GroundingPassageId"
    },
    "DynamicRetrievalConfig": {
      "id": "DynamicRetrievalConfig",
      "description": "Describes the options to customize dynamic retrieval.",
      "type": "object",
      "properties": {
        "dynamicThreshold": {
          "type": "number",
          "description": "The threshold to be used in dynamic retrieval. If not set, a system default value is used.",
          "format": "float"
        },
        "mode": {
          "type": "string",
          "description": "The mode of the predictor to be used in dynamic retrieval.",
          "enum": [
            "MODE_UNSPECIFIED",
            "MODE_DYNAMIC"
          ],
          "enumDescriptions": [
            "Always trigger retrieval.",
            "Run retrieval only when system decides it is necessary."
          ]
        }
      }
    },
    "VideoFileMetadata": {
      "type": "object",
      "description": "Metadata for a video `File`.",
      "properties": {
        "videoDuration": {
          "format": "google-duration",
          "description": "Duration of the video.",
          "type": "string"
        }
      },
      "id": "VideoFileMetadata"
    },
    "CountMessageTokensRequest": {
      "description": "Counts the number of tokens in the `prompt` sent to a model. Models may tokenize text differently, so each model may return a different `token_count`.",
      "type": "object",
      "properties": {
        "prompt": {
          "description": "Required. The prompt, whose token count is to be returned.",
          "$ref": "MessagePrompt"
        }
      },
      "id": "CountMessageTokensRequest"
    },
    "GoogleSearch": {
      "properties": {
        "timeRangeFilter": {
          "description": "Optional. Filter search results to a specific time range. If customers set a start time, they must set an end time (and vice versa).",
          "$ref": "Interval"
        }
      },
      "type": "object",
      "id": "GoogleSearch",
      "description": "GoogleSearch tool type. Tool to support Google Search in Model. Powered by Google."
    },
    "PrebuiltVoiceConfig": {
      "description": "The configuration for the prebuilt speaker to use.",
      "properties": {
        "voiceName": {
          "type": "string",
          "description": "The name of the preset voice to use."
        }
      },
      "type": "object",
      "id": "PrebuiltVoiceConfig"
    },
    "Schema": {
      "id": "Schema",
      "properties": {
        "items": {
          "$ref": "Schema",
          "description": "Optional. Schema of the elements of Type.ARRAY."
        },
        "minimum": {
          "description": "Optional. SCHEMA FIELDS FOR TYPE INTEGER and NUMBER Minimum value of the Type.INTEGER and Type.NUMBER",
          "format": "double",
          "type": "number"
        },
        "minLength": {
          "description": "Optional. SCHEMA FIELDS FOR TYPE STRING Minimum length of the Type.STRING",
          "type": "string",
          "format": "int64"
        },
        "description": {
          "description": "Optional. A brief description of the parameter. This could contain examples of use. Parameter description may be formatted as Markdown.",
          "type": "string"
        },
        "format": {
          "type": "string",
          "description": "Optional. The format of the data. Any value is allowed, but most do not trigger any special functionality."
        },
        "enum": {
          "items": {
            "type": "string"
          },
          "description": "Optional. Possible values of the element of Type.STRING with enum format. For example we can define an Enum Direction as : {type:STRING, format:enum, enum:[\"EAST\", NORTH\", \"SOUTH\", \"WEST\"]}",
          "type": "array"
        },
        "maxItems": {
          "format": "int64",
          "description": "Optional. Maximum number of the elements for Type.ARRAY.",
          "type": "string"
        },
        "type": {
          "enum": [
            "TYPE_UNSPECIFIED",
            "STRING",
            "NUMBER",
            "INTEGER",
            "BOOLEAN",
            "ARRAY",
            "OBJECT",
            "NULL"
          ],
          "description": "Required. Data type.",
          "enumDescriptions": [
            "Not specified, should not be used.",
            "String type.",
            "Number type.",
            "Integer type.",
            "Boolean type.",
            "Array type.",
            "Object type.",
            "Null type."
          ],
          "type": "string"
        },
        "maximum": {
          "type": "number",
          "format": "double",
          "description": "Optional. Maximum value of the Type.INTEGER and Type.NUMBER"
        },
        "minItems": {
          "format": "int64",
          "type": "string",
          "description": "Optional. Minimum number of the elements for Type.ARRAY."
        },
        "properties": {
          "additionalProperties": {
            "$ref": "Schema"
          },
          "description": "Optional. Properties of Type.OBJECT.",
          "type": "object"
        },
        "anyOf": {
          "items": {
            "$ref": "Schema"
          },
          "type": "array",
          "description": "Optional. The value should be validated against any (one or more) of the subschemas in the list."
        },
        "minProperties": {
          "format": "int64",
          "type": "string",
          "description": "Optional. Minimum number of the properties for Type.OBJECT."
        },
        "example": {
          "description": "Optional. Example of the object. Will only populated when the object is the root.",
          "type": "any"
        },
        "pattern": {
          "type": "string",
          "description": "Optional. Pattern of the Type.STRING to restrict a string to a regular expression."
        },
        "maxProperties": {
          "type": "string",
          "description": "Optional. Maximum number of the properties for Type.OBJECT.",
          "format": "int64"
        },
        "nullable": {
          "type": "boolean",
          "description": "Optional. Indicates if the value may be null."
        },
        "required": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "description": "Optional. Required properties of Type.OBJECT."
        },
        "default": {
          "type": "any",
          "description": "Optional. Default value of the field. Per JSON Schema, this field is intended for documentation generators and doesn't affect validation. Thus it's included here and ignored so that developers who send schemas with a `default` field don't get unknown-field errors."
        },
        "maxLength": {
          "type": "string",
          "format": "int64",
          "description": "Optional. Maximum length of the Type.STRING"
        },
        "title": {
          "type": "string",
          "description": "Optional. The title of the schema."
        },
        "propertyOrdering": {
          "description": "Optional. The order of the properties. Not a standard field in open api spec. Used to determine the order of the properties in the response.",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "description": "The `Schema` object allows the definition of input and output data types. These types can be objects, but also primitives and arrays. Represents a select subset of an [OpenAPI 3.0 schema object](https://spec.openapis.org/oas/v3.0.3#schema).",
      "type": "object"
    },
    "UsageMetadata": {
      "id": "UsageMetadata",
      "description": "Metadata on the generation request's token usage.",
      "properties": {
        "toolUsePromptTokensDetails": {
          "items": {
            "$ref": "ModalityTokenCount"
          },
          "description": "Output only. List of modalities that were processed for tool-use request inputs.",
          "readOnly": true,
          "type": "array"
        },
        "candidatesTokensDetails": {
          "items": {
            "$ref": "ModalityTokenCount"
          },
          "readOnly": true,
          "description": "Output only. List of modalities that were returned in the response.",
          "type": "array"
        },
        "thoughtsTokenCount": {
          "format": "int32",
          "readOnly": true,
          "description": "Output only. Number of tokens of thoughts for thinking models.",
          "type": "integer"
        },
        "cacheTokensDetails": {
          "description": "Output only. List of modalities of the cached content in the request input.",
          "type": "array",
          "items": {
            "$ref": "ModalityTokenCount"
          },
          "readOnly": true
        },
        "toolUsePromptTokenCount": {
          "type": "integer",
          "description": "Output only. Number of tokens present in tool-use prompt(s).",
          "format": "int32",
          "readOnly": true
        },
        "totalTokenCount": {
          "type": "integer",
          "description": "Total token count for the generation request (prompt + response candidates).",
          "format": "int32"
        },
        "candidatesTokenCount": {
          "type": "integer",
          "format": "int32",
          "description": "Total number of tokens across all the generated response candidates."
        },
        "promptTokenCount": {
          "type": "integer",
          "format": "int32",
          "description": "Number of tokens in the prompt. When `cached_content` is set, this is still the total effective prompt size meaning this includes the number of tokens in the cached content."
        },
        "cachedContentTokenCount": {
          "description": "Number of tokens in the cached part of the prompt (the cached content)",
          "format": "int32",
          "type": "integer"
        },
        "promptTokensDetails": {
          "type": "array",
          "readOnly": true,
          "items": {
            "$ref": "ModalityTokenCount"
          },
          "description": "Output only. List of modalities that were processed in the request input."
        }
      },
      "type": "object"
    },
    "TunedModelSource": {
      "id": "TunedModelSource",
      "description": "Tuned model as a source for training a new model.",
      "properties": {
        "tunedModel": {
          "description": "Immutable. The name of the `TunedModel` to use as the starting point for training the new model. Example: `tunedModels/my-tuned-model`",
          "type": "string"
        },
        "baseModel": {
          "readOnly": true,
          "type": "string",
          "description": "Output only. The name of the base `Model` this `TunedModel` was tuned from. Example: `models/gemini-1.5-flash-001`"
        }
      },
      "type": "object"
    },
    "GoogleMaps": {
      "id": "GoogleMaps",
      "properties": {
        "enableWidget": {
          "type": "boolean",
          "description": "Optional. Whether to return a widget context token in the GroundingMetadata of the response. Developers can use the widget context token to render a Google Maps widget with geospatial context related to the places that the model references in the response."
        }
      },
      "type": "object",
      "description": "The GoogleMaps Tool that provides geospatial context for the user's query."
    },
    "TuningSnapshot": {
      "properties": {
        "meanLoss": {
          "type": "number",
          "format": "float",
          "readOnly": true,
          "description": "Output only. The mean loss of the training examples for this step."
        },
        "step": {
          "type": "integer",
          "readOnly": true,
          "format": "int32",
          "description": "Output only. The tuning step."
        },
        "epoch": {
          "description": "Output only. The epoch this step was part of.",
          "type": "integer",
          "readOnly": true,
          "format": "int32"
        },
        "computeTime": {
          "format": "google-datetime",
          "readOnly": true,
          "type": "string",
          "description": "Output only. The timestamp when this metric was computed."
        }
      },
      "type": "object",
      "description": "Record for a single tuning step.",
      "id": "TuningSnapshot"
    },
    "Dataset": {
      "type": "object",
      "description": "Dataset for training or validation.",
      "id": "Dataset",
      "properties": {
        "examples": {
          "description": "Optional. Inline examples with simple input/output text.",
          "$ref": "TuningExamples"
        }
      }
    },
    "Status": {
      "description": "The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32",
          "description": "The status code, which should be an enum value of google.rpc.Code."
        },
        "details": {
          "description": "A list of messages that carry the error details. There is a common set of message types for APIs to use.",
          "type": "array",
          "items": {
            "additionalProperties": {
              "type": "any",
              "description": "Properties of the object. Contains field @type with type URL."
            },
            "type": "object"
          }
        },
        "message": {
          "description": "A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client.",
          "type": "string"
        }
      },
      "id": "Status",
      "type": "object"
    },
    "UrlMetadata": {
      "properties": {
        "retrievedUrl": {
          "type": "string",
          "description": "Retrieved url by the tool."
        },
        "urlRetrievalStatus": {
          "enum": [
            "URL_RETRIEVAL_STATUS_UNSPECIFIED",
            "URL_RETRIEVAL_STATUS_SUCCESS",
            "URL_RETRIEVAL_STATUS_ERROR",
            "URL_RETRIEVAL_STATUS_PAYWALL",
            "URL_RETRIEVAL_STATUS_UNSAFE"
          ],
          "type": "string",
          "enumDescriptions": [
            "Default value. This value is unused.",
            "Url retrieval is successful.",
            "Url retrieval is failed due to error.",
            "Url retrieval is failed because the content is behind paywall.",
            "Url retrieval is failed because the content is unsafe."
          ],
          "description": "Status of the url retrieval."
        }
      },
      "id": "UrlMetadata",
      "description": "Context of the a single url retrieval.",
      "type": "object"
    },
    "CountTokensRequest": {
      "description": "Counts the number of tokens in the `prompt` sent to a model. Models may tokenize text differently, so each model may return a different `token_count`.",
      "id": "CountTokensRequest",
      "type": "object",
      "properties": {
        "generateContentRequest": {
          "description": "Optional. The overall input given to the `Model`. This includes the prompt as well as other model steering information like [system instructions](https://ai.google.dev/gemini-api/docs/system-instructions), and/or function declarations for [function calling](https://ai.google.dev/gemini-api/docs/function-calling). `Model`s/`Content`s and `generate_content_request`s are mutually exclusive. You can either send `Model` + `Content`s or a `generate_content_request`, but never both.",
          "$ref": "GenerateContentRequest"
        },
        "contents": {
          "description": "Optional. The input given to the model as a prompt. This field is ignored when `generate_content_request` is set.",
          "type": "array",
          "items": {
            "$ref": "Content"
          }
        }
      }
    },
    "SpeechConfig": {
      "type": "object",
      "properties": {
        "multiSpeakerVoiceConfig": {
          "description": "Optional. The configuration for the multi-speaker setup. It is mutually exclusive with the voice_config field.",
          "$ref": "MultiSpeakerVoiceConfig"
        },
        "voiceConfig": {
          "description": "The configuration in case of single-voice output.",
          "$ref": "VoiceConfig"
        },
        "languageCode": {
          "description": "Optional. Language code (in BCP 47 format, e.g. \"en-US\") for speech synthesis. Valid values are: de-DE, en-AU, en-GB, en-IN, en-US, es-US, fr-FR, hi-IN, pt-BR, ar-XA, es-ES, fr-CA, id-ID, it-IT, ja-JP, tr-TR, vi-VN, bn-IN, gu-IN, kn-IN, ml-IN, mr-IN, ta-IN, te-IN, nl-NL, ko-KR, cmn-CN, pl-PL, ru-RU, and th-TH.",
          "type": "string"
        }
      },
      "description": "The speech generation config.",
      "id": "SpeechConfig"
    },
    "InputFeedback": {
      "id": "InputFeedback",
      "type": "object",
      "description": "Feedback related to the input data used to answer the question, as opposed to the model-generated response to the question.",
      "properties": {
        "safetyRatings": {
          "type": "array",
          "description": "Ratings for safety of the input. There is at most one rating per category.",
          "items": {
            "$ref": "SafetyRating"
          }
        },
        "blockReason": {
          "description": "Optional. If set, the input was blocked and no candidates are returned. Rephrase the input.",
          "enum": [
            "BLOCK_REASON_UNSPECIFIED",
            "SAFETY",
            "OTHER"
          ],
          "type": "string",
          "enumDescriptions": [
            "Default value. This value is unused.",
            "Input was blocked due to safety reasons. Inspect `safety_ratings` to understand which safety category blocked it.",
            "Input was blocked due to other reasons."
          ]
        }
      }
    },
    "LogprobsResultCandidate": {
      "properties": {
        "logProbability": {
          "type": "number",
          "description": "The candidate's log probability.",
          "format": "float"
        },
        "tokenId": {
          "type": "integer",
          "format": "int32",
          "description": "The candidate’s token id value."
        },
        "token": {
          "description": "The candidate’s token string value.",
          "type": "string"
        }
      },
      "type": "object",
      "id": "LogprobsResultCandidate",
      "description": "Candidate for the logprobs token and score."
    },
    "GroundingAttribution": {
      "properties": {
        "content": {
          "$ref": "Content",
          "description": "Grounding source content that makes up this attribution."
        },
        "sourceId": {
          "readOnly": true,
          "description": "Output only. Identifier for the source contributing to this attribution.",
          "$ref": "AttributionSourceId"
        }
      },
      "id": "GroundingAttribution",
      "description": "Attribution for a source that contributed to an answer.",
      "type": "object"
    },
    "EmbedContentBatchOutput": {
      "description": "The output of a batch request. This is returned in the `AsyncBatchEmbedContentResponse` or the `EmbedContentBatch.output` field.",
      "type": "object",
      "id": "EmbedContentBatchOutput",
      "properties": {
        "inlinedResponses": {
          "$ref": "InlinedEmbedContentResponses",
          "readOnly": true,
          "description": "Output only. The responses to the requests in the batch. Returned when the batch was built using inlined requests. The responses will be in the same order as the input requests."
        },
        "responsesFile": {
          "type": "string",
          "description": "Output only. The file ID of the file containing the responses. The file will be a JSONL file with a single response per line. The responses will be `EmbedContentResponse` messages formatted as JSON. The responses will be written in the same order as the input requests.",
          "readOnly": true
        }
      }
    },
    "BatchEmbedTextResponse": {
      "description": "The response to a EmbedTextRequest.",
      "id": "BatchEmbedTextResponse",
      "properties": {
        "embeddings": {
          "description": "Output only. The embeddings generated from the input text.",
          "readOnly": true,
          "items": {
            "$ref": "Embedding"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "DeleteChunkRequest": {
      "id": "DeleteChunkRequest",
      "type": "object",
      "description": "Request to delete a `Chunk`.",
      "properties": {
        "name": {
          "type": "string",
          "description": "Required. The resource name of the `Chunk` to delete. Example: `corpora/my-corpus-123/documents/the-doc-abc/chunks/some-chunk`"
        }
      }
    },
    "CountTextTokensResponse": {
      "id": "CountTextTokensResponse",
      "properties": {
        "tokenCount": {
          "type": "integer",
          "format": "int32",
          "description": "The number of tokens that the `model` tokenizes the `prompt` into. Always non-negative."
        }
      },
      "type": "object",
      "description": "A response from `CountTextTokens`. It returns the model's `token_count` for the `prompt`."
    },
    "CountTextTokensRequest": {
      "id": "CountTextTokensRequest",
      "description": "Counts the number of tokens in the `prompt` sent to a model. Models may tokenize text differently, so each model may return a different `token_count`.",
      "properties": {
        "prompt": {
          "$ref": "TextPrompt",
          "description": "Required. The free-form input text given to the model as a prompt."
        }
      },
      "type": "object"
    },
    "GenerateContentResponse": {
      "description": "Response from the model supporting multiple candidate responses. Safety ratings and content filtering are reported for both prompt in `GenerateContentResponse.prompt_feedback` and for each candidate in `finish_reason` and in `safety_ratings`. The API: - Returns either all requested candidates or none of them - Returns no candidates at all only if there was something wrong with the prompt (check `prompt_feedback`) - Reports feedback on each candidate in `finish_reason` and `safety_ratings`.",
      "type": "object",
      "id": "GenerateContentResponse",
      "properties": {
        "modelVersion": {
          "readOnly": true,
          "description": "Output only. The model version used to generate the response.",
          "type": "string"
        },
        "candidates": {
          "items": {
            "$ref": "Candidate"
          },
          "description": "Candidate responses from the model.",
          "type": "array"
        },
        "responseId": {
          "type": "string",
          "description": "Output only. response_id is used to identify each response.",
          "readOnly": true
        },
        "promptFeedback": {
          "description": "Returns the prompt's feedback related to the content filters.",
          "$ref": "PromptFeedback"
        },
        "usageMetadata": {
          "readOnly": true,
          "description": "Output only. Metadata on the generation requests' token usage.",
          "$ref": "UsageMetadata"
        }
      }
    },
    "Content": {
      "properties": {
        "role": {
          "description": "Optional. The producer of the content. Must be either 'user' or 'model'. Useful to set for multi-turn conversations, otherwise can be left blank or unset.",
          "type": "string"
        },
        "parts": {
          "description": "Ordered `Parts` that constitute a single message. Parts may have different MIME types.",
          "type": "array",
          "items": {
            "$ref": "Part"
          }
        }
      },
      "id": "Content",
      "description": "The base structured datatype containing multi-part content of a message. A `Content` includes a `role` field designating the producer of the `Content` and a `parts` field containing multi-part data that contains the content of the message turn.",
      "type": "object"
    },
    "ToolConfig": {
      "type": "object",
      "description": "The Tool configuration containing parameters for specifying `Tool` use in the request.",
      "id": "ToolConfig",
      "properties": {
        "functionCallingConfig": {
          "description": "Optional. Function calling config.",
          "$ref": "FunctionCallingConfig"
        },
        "retrievalConfig": {
          "description": "Optional. Retrieval config.",
          "$ref": "RetrievalConfig"
        }
      }
    },
    "RagStore": {
      "description": "A `RagStore` is a collection of `Document`s.",
      "properties": {
        "name": {
          "description": "Output only. Immutable. Identifier. The `RagStore` resource name. It is an ID (name excluding the \"ragStores/\" prefix) that can contain up to 40 characters that are lowercase alphanumeric or dashes (-). It is output only. The unique name will be derived from `display_name` along with a 12 character random suffix. Example: `ragStores/my-awesome-rag-store-123a456b789c` If `display_name` is not provided, the name will be randomly generated.",
          "type": "string",
          "readOnly": true
        },
        "failedDocumentsCount": {
          "description": "Output only. The number of documents in the Ragstore that have failed processing.",
          "format": "int64",
          "type": "string",
          "readOnly": true
        },
        "pendingDocumentsCount": {
          "description": "Output only. The number of documents in the Ragstore that are being processed.",
          "readOnly": true,
          "type": "string",
          "format": "int64"
        },
        "createTime": {
          "format": "google-datetime",
          "description": "Output only. The Timestamp of when the `RagStore` was created.",
          "readOnly": true,
          "type": "string"
        },
        "updateTime": {
          "readOnly": true,
          "description": "Output only. The Timestamp of when the `RagStore` was last updated.",
          "format": "google-datetime",
          "type": "string"
        },
        "activeDocumentsCount": {
          "readOnly": true,
          "description": "Output only. The number of documents in the Ragstore that are active and ready for retrieval.",
          "format": "int64",
          "type": "string"
        },
        "displayName": {
          "type": "string",
          "description": "Optional. The human-readable display name for the `RagStore`. The display name must be no more than 512 characters in length, including spaces. Example: \"Docs on Semantic Retriever\""
        },
        "sizeBytes": {
          "type": "string",
          "description": "Output only. The size in bytes of the Ragstore. This is the total size of all the documents in the Ragstore.",
          "readOnly": true,
          "format": "int64"
        }
      },
      "type": "object",
      "id": "RagStore"
    },
    "ListOperationsResponse": {
      "id": "ListOperationsResponse",
      "description": "The response message for Operations.ListOperations.",
      "type": "object",
      "properties": {
        "operations": {
          "description": "A list of operations that matches the specified filter in the request.",
          "items": {
            "$ref": "Operation"
          },
          "type": "array"
        },
        "unreachable": {
          "items": {
            "type": "string"
          },
          "description": "Unordered list. Unreachable resources. Populated when the request sets `ListOperationsRequest.return_partial_success` and reads across collections e.g. when attempting to list all resources across all supported locations.",
          "type": "array"
        },
        "nextPageToken": {
          "description": "The standard List next-page token.",
          "type": "string"
        }
      }
    },
    "MetadataFilter": {
      "id": "MetadataFilter",
      "type": "object",
      "description": "User provided filter to limit retrieval based on `Chunk` or `Document` level metadata values. Example (genre = drama OR genre = action): key = \"document.custom_metadata.genre\" conditions = [{string_value = \"drama\", operation = EQUAL}, {string_value = \"action\", operation = EQUAL}]",
      "properties": {
        "key": {
          "type": "string",
          "description": "Required. The key of the metadata to filter on."
        },
        "conditions": {
          "items": {
            "$ref": "Condition"
          },
          "type": "array",
          "description": "Required. The `Condition`s for the given key that will trigger this filter. Multiple `Condition`s are joined by logical ORs."
        }
      }
    },
    "AttributionSourceId": {
      "properties": {
        "groundingPassage": {
          "$ref": "GroundingPassageId",
          "description": "Identifier for an inline passage."
        },
        "semanticRetrieverChunk": {
          "$ref": "SemanticRetrieverChunk",
          "description": "Identifier for a `Chunk` fetched via Semantic Retriever."
        }
      },
      "type": "object",
      "id": "AttributionSourceId",
      "description": "Identifier for the source contributing to this attribution."
    },
    "Operation": {
      "type": "object",
      "properties": {
        "name": {
          "description": "The server-assigned name, which is only unique within the same service that originally returns it. If you use the default HTTP mapping, the `name` should be a resource name ending with `operations/{unique_id}`.",
          "type": "string"
        },
        "error": {
          "$ref": "Status",
          "description": "The error result of the operation in case of failure or cancellation."
        },
        "done": {
          "type": "boolean",
          "description": "If the value is `false`, it means the operation is still in progress. If `true`, the operation is completed, and either `error` or `response` is available."
        },
        "response": {
          "additionalProperties": {
            "type": "any",
            "description": "Properties of the object. Contains field @type with type URL."
          },
          "type": "object",
          "description": "The normal, successful response of the operation. If the original method returns no data on success, such as `Delete`, the response is `google.protobuf.Empty`. If the original method is standard `Get`/`Create`/`Update`, the response should be the resource. For other methods, the response should have the type `XxxResponse`, where `Xxx` is the original method name. For example, if the original method name is `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`."
        },
        "metadata": {
          "additionalProperties": {
            "description": "Properties of the object. Contains field @type with type URL.",
            "type": "any"
          },
          "description": "Service-specific metadata associated with the operation. It typically contains progress information and common metadata such as create time. Some services might not provide such metadata. Any method that returns a long-running operation should document the metadata type, if any.",
          "type": "object"
        }
      },
      "id": "Operation",
      "description": "This resource represents a long-running operation that is the result of a network API call."
    },
    "Part": {
      "description": "A datatype containing media that is part of a multi-part `Content` message. A `Part` consists of data which has an associated datatype. A `Part` can only contain one of the accepted types in `Part.data`. A `Part` must have a fixed IANA MIME type identifying the type and subtype of the media if the `inline_data` field is filled with raw bytes.",
      "properties": {
        "partMetadata": {
          "additionalProperties": {
            "type": "any",
            "description": "Properties of the object."
          },
          "type": "object",
          "description": "Custom metadata associated with the Part. Agents using genai.Part as content representation may need to keep track of the additional information. For example it can be name of a file/source from which the Part originates or a way to multiplex multiple Part streams."
        },
        "functionCall": {
          "description": "A predicted `FunctionCall` returned from the model that contains a string representing the `FunctionDeclaration.name` with the arguments and their values.",
          "$ref": "FunctionCall"
        },
        "inlineData": {
          "description": "Inline media bytes.",
          "$ref": "Blob"
        },
        "executableCode": {
          "$ref": "ExecutableCode",
          "description": "Code generated by the model that is meant to be executed."
        },
        "text": {
          "description": "Inline text.",
          "type": "string"
        },
        "functionResponse": {
          "description": "The result output of a `FunctionCall` that contains a string representing the `FunctionDeclaration.name` and a structured JSON object containing any output from the function is used as context to the model.",
          "$ref": "FunctionResponse"
        },
        "fileData": {
          "$ref": "FileData",
          "description": "URI based data."
        },
        "thoughtSignature": {
          "type": "string",
          "format": "byte",
          "description": "Optional. An opaque signature for the thought so it can be reused in subsequent requests."
        },
        "thought": {
          "description": "Optional. Indicates if the part is thought from the model.",
          "type": "boolean"
        },
        "codeExecutionResult": {
          "description": "Result of executing the `ExecutableCode`.",
          "$ref": "CodeExecutionResult"
        },
        "videoMetadata": {
          "description": "Optional. Video metadata. The metadata should only be specified while the video data is presented in inline_data or file_data.",
          "$ref": "VideoMetadata"
        }
      },
      "id": "Part",
      "type": "object"
    },
    "BatchCreateChunksRequest": {
      "type": "object",
      "description": "Request to batch create `Chunk`s.",
      "properties": {
        "requests": {
          "items": {
            "$ref": "CreateChunkRequest"
          },
          "type": "array",
          "description": "Required. The request messages specifying the `Chunk`s to create. A maximum of 100 `Chunk`s can be created in a batch."
        }
      },
      "id": "BatchCreateChunksRequest"
    },
    "GenerateAnswerResponse": {
      "properties": {
        "inputFeedback": {
          "$ref": "InputFeedback",
          "readOnly": true,
          "description": "Output only. Feedback related to the input data used to answer the question, as opposed to the model-generated response to the question. The input data can be one or more of the following: - Question specified by the last entry in `GenerateAnswerRequest.content` - Conversation history specified by the other entries in `GenerateAnswerRequest.content` - Grounding sources (`GenerateAnswerRequest.semantic_retriever` or `GenerateAnswerRequest.inline_passages`)"
        },
        "answer": {
          "description": "Candidate answer from the model. Note: The model *always* attempts to provide a grounded answer, even when the answer is unlikely to be answerable from the given passages. In that case, a low-quality or ungrounded answer may be provided, along with a low `answerable_probability`.",
          "$ref": "Candidate"
        },
        "answerableProbability": {
          "description": "Output only. The model's estimate of the probability that its answer is correct and grounded in the input passages. A low `answerable_probability` indicates that the answer might not be grounded in the sources. When `answerable_probability` is low, you may want to: * Display a message to the effect of \"We couldn’t answer that question\" to the user. * Fall back to a general-purpose LLM that answers the question from world knowledge. The threshold and nature of such fallbacks will depend on individual use cases. `0.5` is a good starting threshold.",
          "type": "number",
          "readOnly": true,
          "format": "float"
        }
      },
      "description": "Response from the model for a grounded answer.",
      "id": "GenerateAnswerResponse",
      "type": "object"
    },
    "InlinedResponses": {
      "id": "InlinedResponses",
      "description": "The responses to the requests in the batch.",
      "properties": {
        "inlinedResponses": {
          "readOnly": true,
          "description": "Output only. The responses to the requests in the batch.",
          "items": {
            "$ref": "InlinedResponse"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "QueryDocumentResponse": {
      "description": "Response from `QueryDocument` containing a list of relevant chunks.",
      "id": "QueryDocumentResponse",
      "type": "object",
      "properties": {
        "relevantChunks": {
          "items": {
            "$ref": "RelevantChunk"
          },
          "description": "The returned relevant chunks.",
          "type": "array"
        }
      }
    },
    "TunedModel": {
      "description": "A fine-tuned model created using ModelService.CreateTunedModel.",
      "type": "object",
      "id": "TunedModel",
      "properties": {
        "updateTime": {
          "format": "google-datetime",
          "description": "Output only. The timestamp when this model was updated.",
          "type": "string",
          "readOnly": true
        },
        "topP": {
          "format": "float",
          "type": "number",
          "description": "Optional. For Nucleus sampling. Nucleus sampling considers the smallest set of tokens whose probability sum is at least `top_p`. This value specifies default to be the one used by the base model while creating the model."
        },
        "displayName": {
          "type": "string",
          "description": "Optional. The name to display for this model in user interfaces. The display name must be up to 40 characters including spaces."
        },
        "baseModel": {
          "description": "Immutable. The name of the `Model` to tune. Example: `models/gemini-1.5-flash-001`",
          "type": "string"
        },
        "name": {
          "type": "string",
          "readOnly": true,
          "description": "Output only. The tuned model name. A unique name will be generated on create. Example: `tunedModels/az2mb0bpw6i` If display_name is set on create, the id portion of the name will be set by concatenating the words of the display_name with hyphens and adding a random portion for uniqueness. Example: * display_name = `Sentence Translator` * name = `tunedModels/sentence-translator-u3b7m`"
        },
        "state": {
          "enum": [
            "STATE_UNSPECIFIED",
            "CREATING",
            "ACTIVE",
            "FAILED"
          ],
          "enumDescriptions": [
            "The default value. This value is unused.",
            "The model is being created.",
            "The model is ready to be used.",
            "The model failed to be created."
          ],
          "readOnly": true,
          "description": "Output only. The state of the tuned model.",
          "type": "string"
        },
        "tunedModelSource": {
          "description": "Optional. TunedModel to use as the starting point for training the new model.",
          "$ref": "TunedModelSource"
        },
        "tuningTask": {
          "description": "Required. The tuning task that creates the tuned model.",
          "$ref": "TuningTask"
        },
        "readerProjectNumbers": {
          "type": "array",
          "description": "Optional. List of project numbers that have read access to the tuned model.",
          "items": {
            "format": "int64",
            "type": "string"
          }
        },
        "createTime": {
          "format": "google-datetime",
          "description": "Output only. The timestamp when this model was created.",
          "type": "string",
          "readOnly": true
        },
        "temperature": {
          "format": "float",
          "description": "Optional. Controls the randomness of the output. Values can range over `[0.0,1.0]`, inclusive. A value closer to `1.0` will produce responses that are more varied, while a value closer to `0.0` will typically result in less surprising responses from the model. This value specifies default to be the one used by the base model while creating the model.",
          "type": "number"
        },
        "description": {
          "type": "string",
          "description": "Optional. A short description of this model."
        },
        "topK": {
          "description": "Optional. For Top-k sampling. Top-k sampling considers the set of `top_k` most probable tokens. This value specifies default to be used by the backend while making the call to the model. This value specifies default to be the one used by the base model while creating the model.",
          "format": "int32",
          "type": "integer"
        }
      }
    },
    "CountMessageTokensResponse": {
      "id": "CountMessageTokensResponse",
      "properties": {
        "tokenCount": {
          "format": "int32",
          "type": "integer",
          "description": "The number of tokens that the `model` tokenizes the `prompt` into. Always non-negative."
        }
      },
      "type": "object",
      "description": "A response from `CountMessageTokens`. It returns the model's `token_count` for the `prompt`."
    },
    "StringList": {
      "description": "User provided string values assigned to a single metadata key.",
      "properties": {
        "values": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "description": "The string values of the metadata to store."
        }
      },
      "id": "StringList",
      "type": "object"
    },
    "Model": {
      "id": "Model",
      "description": "Information about a Generative Language Model.",
      "properties": {
        "name": {
          "description": "Required. The resource name of the `Model`. Refer to [Model variants](https://ai.google.dev/gemini-api/docs/models/gemini#model-variations) for all allowed values. Format: `models/{model}` with a `{model}` naming convention of: * \"{base_model_id}-{version}\" Examples: * `models/gemini-1.5-flash-001`",
          "type": "string"
        },
        "supportedGenerationMethods": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "The model's supported generation methods. The corresponding API method names are defined as Pascal case strings, such as `generateMessage` and `generateContent`."
        },
        "maxTemperature": {
          "description": "The maximum temperature this model can use.",
          "format": "float",
          "type": "number"
        },
        "baseModelId": {
          "type": "string",
          "description": "Required. The name of the base model, pass this to the generation request. Examples: * `gemini-1.5-flash`"
        },
        "thinking": {
          "description": "Whether the model supports thinking.",
          "type": "boolean"
        },
        "displayName": {
          "type": "string",
          "description": "The human-readable name of the model. E.g. \"Gemini 1.5 Flash\". The name can be up to 128 characters long and can consist of any UTF-8 characters."
        },
        "temperature": {
          "type": "number",
          "description": "Controls the randomness of the output. Values can range over `[0.0,max_temperature]`, inclusive. A higher value will produce responses that are more varied, while a value closer to `0.0` will typically result in less surprising responses from the model. This value specifies default to be used by the backend while making the call to the model.",
          "format": "float"
        },
        "outputTokenLimit": {
          "type": "integer",
          "format": "int32",
          "description": "Maximum number of output tokens available for this model."
        },
        "inputTokenLimit": {
          "description": "Maximum number of input tokens allowed for this model.",
          "type": "integer",
          "format": "int32"
        },
        "topK": {
          "description": "For Top-k sampling. Top-k sampling considers the set of `top_k` most probable tokens. This value specifies default to be used by the backend while making the call to the model. If empty, indicates the model doesn't use top-k sampling, and `top_k` isn't allowed as a generation parameter.",
          "format": "int32",
          "type": "integer"
        },
        "version": {
          "type": "string",
          "description": "Required. The version number of the model. This represents the major version (`1.0` or `1.5`)"
        },
        "topP": {
          "description": "For [Nucleus sampling](https://ai.google.dev/gemini-api/docs/prompting-strategies#top-p). Nucleus sampling considers the smallest set of tokens whose probability sum is at least `top_p`. This value specifies default to be used by the backend while making the call to the model.",
          "type": "number",
          "format": "float"
        },
        "description": {
          "description": "A short description of the model.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "FunctionCallingConfig": {
      "description": "Configuration for specifying function calling behavior.",
      "type": "object",
      "id": "FunctionCallingConfig",
      "properties": {
        "mode": {
          "description": "Optional. Specifies the mode in which function calling should execute. If unspecified, the default value will be set to AUTO.",
          "enumDescriptions": [
            "Unspecified function calling mode. This value should not be used.",
            "Default model behavior, model decides to predict either a function call or a natural language response.",
            "Model is constrained to always predicting a function call only. If \"allowed_function_names\" are set, the predicted function call will be limited to any one of \"allowed_function_names\", else the predicted function call will be any one of the provided \"function_declarations\".",
            "Model will not predict any function call. Model behavior is same as when not passing any function declarations.",
            "Model decides to predict either a function call or a natural language response, but will validate function calls with constrained decoding. If \"allowed_function_names\" are set, the predicted function call will be limited to any one of \"allowed_function_names\", else the predicted function call will be any one of the provided \"function_declarations\"."
          ],
          "type": "string",
          "enum": [
            "MODE_UNSPECIFIED",
            "AUTO",
            "ANY",
            "NONE",
            "VALIDATED"
          ]
        },
        "allowedFunctionNames": {
          "items": {
            "type": "string"
          },
          "description": "Optional. A set of function names that, when provided, limits the functions the model will call. This should only be set when the Mode is ANY or VALIDATED. Function names should match [FunctionDeclaration.name]. When set, model will predict a function call from only allowed function names.",
          "type": "array"
        }
      }
    },
    "CustomLongRunningOperation": {
      "id": "CustomLongRunningOperation",
      "description": "This is a copy of google.longrunning.Operation. We need to copy it because for interacting with scotty, we need to add a scotty specific field that can't be added in the top level Operation proto.",
      "type": "object",
      "properties": {
        "response": {
          "additionalProperties": {
            "description": "Properties of the object. Contains field @type with type URL.",
            "type": "any"
          },
          "description": "The normal, successful response of the operation. If the original method returns no data on success, such as `Delete`, the response is `google.protobuf.Empty`. If the original method is standard `Get`/`Create`/`Update`, the response should be the resource. For other methods, the response should have the type `XxxResponse`, where `Xxx` is the original method name. For example, if the original method name is `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`.",
          "type": "object"
        },
        "name": {
          "description": "The server-assigned name, which is only unique within the same service that originally returns it. If you use the default HTTP mapping, the `name` should be a resource name ending with `operations/{unique_id}`.",
          "type": "string"
        },
        "metadata": {
          "additionalProperties": {
            "description": "Properties of the object. Contains field @type with type URL.",
            "type": "any"
          },
          "type": "object",
          "description": "Service-specific metadata associated with the operation. It typically contains progress information and common metadata such as create time. Some services might not provide such metadata. Any method that returns a long-running operation should document the metadata type, if any."
        },
        "done": {
          "description": "If the value is `false`, it means the operation is still in progress. If `true`, the operation is completed, and either `error` or `response` is available.",
          "type": "boolean"
        },
        "error": {
          "$ref": "Status",
          "description": "The error result of the operation in case of failure or cancellation."
        }
      }
    },
    "QueryCorpusRequest": {
      "description": "Request for querying a `Corpus`.",
      "properties": {
        "metadataFilters": {
          "items": {
            "$ref": "MetadataFilter"
          },
          "type": "array",
          "description": "Optional. Filter for `Chunk` and `Document` metadata. Each `MetadataFilter` object should correspond to a unique key. Multiple `MetadataFilter` objects are joined by logical \"AND\"s. Example query at document level: (year >= 2020 OR year < 2010) AND (genre = drama OR genre = action) `MetadataFilter` object list: metadata_filters = [ {key = \"document.custom_metadata.year\" conditions = [{int_value = 2020, operation = GREATER_EQUAL}, {int_value = 2010, operation = LESS}]}, {key = \"document.custom_metadata.year\" conditions = [{int_value = 2020, operation = GREATER_EQUAL}, {int_value = 2010, operation = LESS}]}, {key = \"document.custom_metadata.genre\" conditions = [{string_value = \"drama\", operation = EQUAL}, {string_value = \"action\", operation = EQUAL}]}] Example query at chunk level for a numeric range of values: (year > 2015 AND year <= 2020) `MetadataFilter` object list: metadata_filters = [ {key = \"chunk.custom_metadata.year\" conditions = [{int_value = 2015, operation = GREATER}]}, {key = \"chunk.custom_metadata.year\" conditions = [{int_value = 2020, operation = LESS_EQUAL}]}] Note: \"AND\"s for the same key are only supported for numeric values. String values only support \"OR\"s for the same key."
        },
        "query": {
          "description": "Required. Query string to perform semantic search.",
          "type": "string"
        },
        "resultsCount": {
          "format": "int32",
          "description": "Optional. The maximum number of `Chunk`s to return. The service may return fewer `Chunk`s. If unspecified, at most 10 `Chunk`s will be returned. The maximum specified result count is 100.",
          "type": "integer"
        }
      },
      "id": "QueryCorpusRequest",
      "type": "object"
    },
    "LatLng": {
      "description": "An object that represents a latitude/longitude pair. This is expressed as a pair of doubles to represent degrees latitude and degrees longitude. Unless specified otherwise, this object must conform to the WGS84 standard. Values must be within normalized ranges.",
      "properties": {
        "latitude": {
          "format": "double",
          "description": "The latitude in degrees. It must be in the range [-90.0, +90.0].",
          "type": "number"
        },
        "longitude": {
          "type": "number",
          "format": "double",
          "description": "The longitude in degrees. It must be in the range [-180.0, +180.0]."
        }
      },
      "id": "LatLng",
      "type": "object"
    },
    "TransferOwnershipRequest": {
      "id": "TransferOwnershipRequest",
      "properties": {
        "emailAddress": {
          "description": "Required. The email address of the user to whom the tuned model is being transferred to.",
          "type": "string"
        }
      },
      "type": "object",
      "description": "Request to transfer the ownership of the tuned model."
    },
    "CountTokensResponse": {
      "id": "CountTokensResponse",
      "description": "A response from `CountTokens`. It returns the model's `token_count` for the `prompt`.",
      "properties": {
        "cacheTokensDetails": {
          "type": "array",
          "readOnly": true,
          "description": "Output only. List of modalities that were processed in the cached content.",
          "items": {
            "$ref": "ModalityTokenCount"
          }
        },
        "totalTokens": {
          "type": "integer",
          "format": "int32",
          "description": "The number of tokens that the `Model` tokenizes the `prompt` into. Always non-negative."
        },
        "cachedContentTokenCount": {
          "type": "integer",
          "format": "int32",
          "description": "Number of tokens in the cached part of the prompt (the cached content)."
        },
        "promptTokensDetails": {
          "items": {
            "$ref": "ModalityTokenCount"
          },
          "readOnly": true,
          "type": "array",
          "description": "Output only. List of modalities that were processed in the request input."
        }
      },
      "type": "object"
    },
    "Candidate": {
      "description": "A response candidate generated from the model.",
      "id": "Candidate",
      "type": "object",
      "properties": {
        "index": {
          "description": "Output only. Index of the candidate in the list of response candidates.",
          "format": "int32",
          "type": "integer",
          "readOnly": true
        },
        "content": {
          "description": "Output only. Generated content returned from the model.",
          "readOnly": true,
          "$ref": "Content"
        },
        "citationMetadata": {
          "description": "Output only. Citation information for model-generated candidate. This field may be populated with recitation information for any text included in the `content`. These are passages that are \"recited\" from copyrighted material in the foundational LLM's training data.",
          "$ref": "CitationMetadata",
          "readOnly": true
        },
        "tokenCount": {
          "description": "Output only. Token count for this candidate.",
          "type": "integer",
          "readOnly": true,
          "format": "int32"
        },
        "urlContextMetadata": {
          "readOnly": true,
          "$ref": "UrlContextMetadata",
          "description": "Output only. Metadata related to url context retrieval tool."
        },
        "groundingAttributions": {
          "items": {
            "$ref": "GroundingAttribution"
          },
          "description": "Output only. Attribution information for sources that contributed to a grounded answer. This field is populated for `GenerateAnswer` calls.",
          "type": "array",
          "readOnly": true
        },
        "groundingMetadata": {
          "$ref": "GroundingMetadata",
          "description": "Output only. Grounding metadata for the candidate. This field is populated for `GenerateContent` calls.",
          "readOnly": true
        },
        "safetyRatings": {
          "items": {
            "$ref": "SafetyRating"
          },
          "type": "array",
          "description": "List of ratings for the safety of a response candidate. There is at most one rating per category."
        },
        "avgLogprobs": {
          "type": "number",
          "format": "double",
          "description": "Output only. Average log probability score of the candidate.",
          "readOnly": true
        },
        "logprobsResult": {
          "description": "Output only. Log-likelihood scores for the response tokens and top tokens",
          "$ref": "LogprobsResult",
          "readOnly": true
        },
        "finishMessage": {
          "type": "string",
          "readOnly": true,
          "description": "Optional. Output only. Details the reason why the model stopped generating tokens. This is populated only when `finish_reason` is set."
        },
        "finishReason": {
          "description": "Optional. Output only. The reason why the model stopped generating tokens. If empty, the model has not stopped generating tokens.",
          "enumDescriptions": [
            "Default value. This value is unused.",
            "Natural stop point of the model or provided stop sequence.",
            "The maximum number of tokens as specified in the request was reached.",
            "The response candidate content was flagged for safety reasons.",
            "The response candidate content was flagged for recitation reasons.",
            "The response candidate content was flagged for using an unsupported language.",
            "Unknown reason.",
            "Token generation stopped because the content contains forbidden terms.",
            "Token generation stopped for potentially containing prohibited content.",
            "Token generation stopped because the content potentially contains Sensitive Personally Identifiable Information (SPII).",
            "The function call generated by the model is invalid.",
            "Token generation stopped because generated images contain safety violations.",
            "Image generation stopped because generated images has other prohibited content.",
            "Image generation stopped because of other miscellaneous issue.",
            "The model was expected to generate an image, but none was generated.",
            "Image generation stopped due to recitation.",
            "Model generated a tool call but no tools were enabled in the request.",
            "Model called too many tools consecutively, thus the system exited execution."
          ],
          "enum": [
            "FINISH_REASON_UNSPECIFIED",
            "STOP",
            "MAX_TOKENS",
            "SAFETY",
            "RECITATION",
            "LANGUAGE",
            "OTHER",
            "BLOCKLIST",
            "PROHIBITED_CONTENT",
            "SPII",
            "MALFORMED_FUNCTION_CALL",
            "IMAGE_SAFETY",
            "IMAGE_PROHIBITED_CONTENT",
            "IMAGE_OTHER",
            "NO_IMAGE",
            "IMAGE_RECITATION",
            "UNEXPECTED_TOOL_CALL",
            "TOO_MANY_TOOL_CALLS"
          ],
          "type": "string",
          "readOnly": true
        }
      }
    },
    "MessagePrompt": {
      "properties": {
        "messages": {
          "items": {
            "$ref": "Message"
          },
          "type": "array",
          "description": "Required. A snapshot of the recent conversation history sorted chronologically. Turns alternate between two authors. If the total input size exceeds the model's `input_token_limit` the input will be truncated: The oldest items will be dropped from `messages`."
        },
        "examples": {
          "items": {
            "$ref": "Example"
          },
          "description": "Optional. Examples of what the model should generate. This includes both user input and the response that the model should emulate. These `examples` are treated identically to conversation messages except that they take precedence over the history in `messages`: If the total input size exceeds the model's `input_token_limit` the input will be truncated. Items will be dropped from `messages` before `examples`.",
          "type": "array"
        },
        "context": {
          "description": "Optional. Text that should be provided to the model first to ground the response. If not empty, this `context` will be given to the model first before the `examples` and `messages`. When using a `context` be sure to provide it with every request to maintain continuity. This field can be a description of your prompt to the model to help provide context and guide the responses. Examples: \"Translate the phrase from English to French.\" or \"Given a statement, classify the sentiment as happy, sad or neutral.\" Anything included in this field will take precedence over message history if the total input size exceeds the model's `input_token_limit` and the input request is truncated.",
          "type": "string"
        }
      },
      "id": "MessagePrompt",
      "type": "object",
      "description": "All of the structured input text passed to the model as a prompt. A `MessagePrompt` contains a structured set of fields that provide context for the conversation, examples of user input/model output message pairs that prime the model to respond in different ways, and the conversation history or list of messages representing the alternating turns of the conversation between the user and the model."
    },
    "CitationSource": {
      "type": "object",
      "description": "A citation to a source for a portion of a specific response.",
      "id": "CitationSource",
      "properties": {
        "startIndex": {
          "description": "Optional. Start of segment of the response that is attributed to this source. Index indicates the start of the segment, measured in bytes.",
          "type": "integer",
          "format": "int32"
        },
        "uri": {
          "description": "Optional. URI that is attributed as a source for a portion of the text.",
          "type": "string"
        },
        "license": {
          "type": "string",
          "description": "Optional. License for the GitHub project that is attributed as a source for segment. License info is required for code citations."
        },
        "endIndex": {
          "type": "integer",
          "format": "int32",
          "description": "Optional. End of the attributed segment, exclusive."
        }
      }
    },
    "BatchStats": {
      "description": "Stats about the batch.",
      "id": "BatchStats",
      "type": "object",
      "properties": {
        "requestCount": {
          "format": "int64",
          "description": "Output only. The number of requests in the batch.",
          "type": "string",
          "readOnly": true
        },
        "pendingRequestCount": {
          "type": "string",
          "readOnly": true,
          "format": "int64",
          "description": "Output only. The number of requests that are still pending processing."
        },
        "successfulRequestCount": {
          "type": "string",
          "format": "int64",
          "description": "Output only. The number of requests that were successfully processed.",
          "readOnly": true
        },
        "failedRequestCount": {
          "type": "string",
          "description": "Output only. The number of requests that failed to be processed.",
          "format": "int64",
          "readOnly": true
        }
      }
    },
    "Interval": {
      "properties": {
        "endTime": {
          "format": "google-datetime",
          "type": "string",
          "description": "Optional. Exclusive end of the interval. If specified, a Timestamp matching this interval will have to be before the end."
        },
        "startTime": {
          "type": "string",
          "format": "google-datetime",
          "description": "Optional. Inclusive start of the interval. If specified, a Timestamp matching this interval will have to be the same or after the start."
        }
      },
      "type": "object",
      "description": "Represents a time interval, encoded as a Timestamp start (inclusive) and a Timestamp end (exclusive). The start must be less than or equal to the end. When the start equals the end, the interval is empty (matches no time). When both start and end are unspecified, the interval matches any time.",
      "id": "Interval"
    },
    "Corpus": {
      "id": "Corpus",
      "properties": {
        "name": {
          "type": "string",
          "description": "Output only. Immutable. Identifier. The `Corpus` resource name. The ID (name excluding the \"corpora/\" prefix) can contain up to 40 characters that are lowercase alphanumeric or dashes (-). The ID cannot start or end with a dash. If the name is empty on create, a unique name will be derived from `display_name` along with a 12 character random suffix. Example: `corpora/my-awesome-corpora-123a456b789c`",
          "readOnly": true
        },
        "createTime": {
          "description": "Output only. The Timestamp of when the `Corpus` was created.",
          "type": "string",
          "format": "google-datetime",
          "readOnly": true
        },
        "updateTime": {
          "type": "string",
          "format": "google-datetime",
          "readOnly": true,
          "description": "Output only. The Timestamp of when the `Corpus` was last updated."
        },
        "displayName": {
          "description": "Optional. The human-readable display name for the `Corpus`. The display name must be no more than 512 characters in length, including spaces. Example: \"Docs on Semantic Retriever\"",
          "type": "string"
        }
      },
      "description": "A `Corpus` is a collection of `Document`s. A project can create up to 10 corpora.",
      "type": "object"
    },
    "File": {
      "description": "A file uploaded to the API. Next ID: 15",
      "properties": {
        "mimeType": {
          "description": "Output only. MIME type of the file.",
          "type": "string",
          "readOnly": true
        },
        "createTime": {
          "readOnly": true,
          "format": "google-datetime",
          "description": "Output only. The timestamp of when the `File` was created.",
          "type": "string"
        },
        "displayName": {
          "type": "string",
          "description": "Optional. The human-readable display name for the `File`. The display name must be no more than 512 characters in length, including spaces. Example: \"Welcome Image\""
        },
        "sha256Hash": {
          "description": "Output only. SHA-256 hash of the uploaded bytes.",
          "readOnly": true,
          "type": "string",
          "format": "byte"
        },
        "uri": {
          "description": "Output only. The uri of the `File`.",
          "readOnly": true,
          "type": "string"
        },
        "downloadUri": {
          "type": "string",
          "description": "Output only. The download uri of the `File`.",
          "readOnly": true
        },
        "videoMetadata": {
          "readOnly": true,
          "description": "Output only. Metadata for a video.",
          "$ref": "VideoFileMetadata"
        },
        "source": {
          "description": "Source of the File.",
          "enum": [
            "SOURCE_UNSPECIFIED",
            "UPLOADED",
            "GENERATED",
            "REGISTERED"
          ],
          "enumDescriptions": [
            "Used if source is not specified.",
            "Indicates the file is uploaded by the user.",
            "Indicates the file is generated by Google.",
            "Indicates the file is a registered, i.e. a Google Cloud Storage file."
          ],
          "type": "string"
        },
        "error": {
          "description": "Output only. Error status if File processing failed.",
          "readOnly": true,
          "$ref": "Status"
        },
        "expirationTime": {
          "format": "google-datetime",
          "type": "string",
          "readOnly": true,
          "description": "Output only. The timestamp of when the `File` will be deleted. Only set if the `File` is scheduled to expire."
        },
        "sizeBytes": {
          "description": "Output only. Size of the file in bytes.",
          "type": "string",
          "readOnly": true,
          "format": "int64"
        },
        "name": {
          "type": "string",
          "description": "Immutable. Identifier. The `File` resource name. The ID (name excluding the \"files/\" prefix) can contain up to 40 characters that are lowercase alphanumeric or dashes (-). The ID cannot start or end with a dash. If the name is empty on create, a unique name will be generated. Example: `files/123-456`"
        },
        "updateTime": {
          "readOnly": true,
          "format": "google-datetime",
          "type": "string",
          "description": "Output only. The timestamp of when the `File` was last updated."
        },
        "state": {
          "description": "Output only. Processing state of the File.",
          "enumDescriptions": [
            "The default value. This value is used if the state is omitted.",
            "File is being processed and cannot be used for inference yet.",
            "File is processed and available for inference.",
            "File failed processing."
          ],
          "type": "string",
          "enum": [
            "STATE_UNSPECIFIED",
            "PROCESSING",
            "ACTIVE",
            "FAILED"
          ],
          "readOnly": true
        }
      },
      "id": "File",
      "type": "object"
    },
    "EmbedContentResponse": {
      "properties": {
        "embedding": {
          "readOnly": true,
          "$ref": "ContentEmbedding",
          "description": "Output only. The embedding generated from the input content."
        }
      },
      "type": "object",
      "id": "EmbedContentResponse",
      "description": "The response to an `EmbedContentRequest`."
    },
    "Chunk": {
      "properties": {
        "state": {
          "description": "Output only. Current state of the `Chunk`.",
          "enum": [
            "STATE_UNSPECIFIED",
            "STATE_PENDING_PROCESSING",
            "STATE_ACTIVE",
            "STATE_FAILED"
          ],
          "type": "string",
          "enumDescriptions": [
            "The default value. This value is used if the state is omitted.",
            "`Chunk` is being processed (embedding and vector storage).",
            "`Chunk` is processed and available for querying.",
            "`Chunk` failed processing."
          ],
          "readOnly": true
        },
        "updateTime": {
          "type": "string",
          "readOnly": true,
          "description": "Output only. The Timestamp of when the `Chunk` was last updated.",
          "format": "google-datetime"
        },
        "data": {
          "description": "Required. The content for the `Chunk`, such as the text string. The maximum number of tokens per chunk is 2043.",
          "$ref": "ChunkData"
        },
        "name": {
          "description": "Immutable. Identifier. The `Chunk` resource name. The ID (name excluding the \"corpora/*/documents/*/chunks/\" prefix) can contain up to 40 characters that are lowercase alphanumeric or dashes (-). The ID cannot start or end with a dash. If the name is empty on create, a random 12-character unique ID will be generated. Example: `corpora/{corpus_id}/documents/{document_id}/chunks/123a456b789c`",
          "type": "string"
        },
        "customMetadata": {
          "description": "Optional. User provided custom metadata stored as key-value pairs. The maximum number of `CustomMetadata` per chunk is 20.",
          "items": {
            "$ref": "CustomMetadata"
          },
          "type": "array"
        },
        "createTime": {
          "readOnly": true,
          "type": "string",
          "description": "Output only. The Timestamp of when the `Chunk` was created.",
          "format": "google-datetime"
        }
      },
      "description": "A `Chunk` is a subpart of a `Document` that is treated as an independent unit for the purposes of vector representation and storage.",
      "id": "Chunk",
      "type": "object"
    },
    "SemanticRetrieverConfig": {
      "type": "object",
      "id": "SemanticRetrieverConfig",
      "properties": {
        "maxChunksCount": {
          "type": "integer",
          "description": "Optional. Maximum number of relevant `Chunk`s to retrieve.",
          "format": "int32"
        },
        "query": {
          "description": "Required. Query to use for matching `Chunk`s in the given resource by similarity.",
          "$ref": "Content"
        },
        "minimumRelevanceScore": {
          "format": "float",
          "type": "number",
          "description": "Optional. Minimum relevance score for retrieved relevant `Chunk`s."
        },
        "source": {
          "type": "string",
          "description": "Required. Name of the resource for retrieval. Example: `corpora/123` or `corpora/123/documents/abc`."
        },
        "metadataFilters": {
          "items": {
            "$ref": "MetadataFilter"
          },
          "type": "array",
          "description": "Optional. Filters for selecting `Document`s and/or `Chunk`s from the resource."
        }
      },
      "description": "Configuration for retrieving grounding content from a `Corpus` or `Document` created using the Semantic Retriever API."
    },
    "BatchEmbedContentsRequest": {
      "properties": {
        "requests": {
          "description": "Required. Embed requests for the batch. The model in each of these requests must match the model specified `BatchEmbedContentsRequest.model`.",
          "items": {
            "$ref": "EmbedContentRequest"
          },
          "type": "array"
        }
      },
      "id": "BatchEmbedContentsRequest",
      "type": "object",
      "description": "Batch request to get embeddings from the model for a list of prompts."
    },
    "FunctionResponseBlob": {
      "type": "object",
      "description": "Raw media bytes for function response. Text should not be sent as raw bytes, use the 'FunctionResponse.response' field.",
      "id": "FunctionResponseBlob",
      "properties": {
        "data": {
          "description": "Raw bytes for media formats.",
          "format": "byte",
          "type": "string"
        },
        "mimeType": {
          "description": "The IANA standard MIME type of the source data. Examples: - image/png - image/jpeg If an unsupported MIME type is provided, an error will be returned. For a complete list of supported types, see [Supported file formats](https://ai.google.dev/gemini-api/docs/prompting_with_media#supported_file_formats).",
          "type": "string"
        }
      }
    },
    "EmbedTextResponse": {
      "type": "object",
      "properties": {
        "embedding": {
          "$ref": "Embedding",
          "description": "Output only. The embedding generated from the input text.",
          "readOnly": true
        }
      },
      "id": "EmbedTextResponse",
      "description": "The response to a EmbedTextRequest."
    },
    "QueryCorpusResponse": {
      "description": "Response from `QueryCorpus` containing a list of relevant chunks.",
      "id": "QueryCorpusResponse",
      "properties": {
        "relevantChunks": {
          "type": "array",
          "items": {
            "$ref": "RelevantChunk"
          },
          "description": "The relevant chunks."
        }
      },
      "type": "object"
    },
    "Document": {
      "type": "object",
      "id": "Document",
      "properties": {
        "name": {
          "description": "Immutable. Identifier. The `Document` resource name. The ID (name excluding the \"ragStores/*/documents/\" prefix) can contain up to 40 characters that are lowercase alphanumeric or dashes (-). The ID cannot start or end with a dash. If the name is empty on create, a unique name will be derived from `display_name` along with a 12 character random suffix. Example: `ragStores/{corpus_id}/documents/my-awesome-doc-123a456b789c`",
          "type": "string"
        },
        "createTime": {
          "type": "string",
          "readOnly": true,
          "description": "Output only. The Timestamp of when the `Document` was created.",
          "format": "google-datetime"
        },
        "sizeBytes": {
          "type": "string",
          "readOnly": true,
          "format": "int64",
          "description": "Output only. The size in bytes of the Document."
        },
        "customMetadata": {
          "description": "Optional. User provided custom metadata stored as key-value pairs used for querying. A `Document` can have a maximum of 20 `CustomMetadata`.",
          "items": {
            "$ref": "CustomMetadata"
          },
          "type": "array"
        },
        "updateTime": {
          "format": "google-datetime",
          "type": "string",
          "readOnly": true,
          "description": "Output only. The Timestamp of when the `Document` was last updated."
        },
        "mimeType": {
          "description": "Output only. The mime type of the Document.",
          "readOnly": true,
          "type": "string"
        },
        "state": {
          "type": "string",
          "readOnly": true,
          "description": "Output only. Current state of the `Document`.",
          "enum": [
            "STATE_UNSPECIFIED",
            "STATE_PENDING",
            "STATE_ACTIVE",
            "STATE_FAILED"
          ],
          "enumDescriptions": [
            "The default value. This value is used if the state is omitted.",
            "Some `Chunks` of the `Document` are being processed (embedding and vector storage).",
            "All `Chunks` of the `Document` is processed and available for querying.",
            "Some `Chunks` of the `Document` failed processing."
          ]
        },
        "displayName": {
          "type": "string",
          "description": "Optional. The human-readable display name for the `Document`. The display name must be no more than 512 characters in length, including spaces. Example: \"Semantic Retriever Documentation\""
        }
      },
      "description": "A `Document` is a collection of `Chunk`s."
    },
    "FileData": {
      "id": "FileData",
      "type": "object",
      "properties": {
        "fileUri": {
          "type": "string",
          "description": "Required. URI."
        },
        "mimeType": {
          "description": "Optional. The IANA standard MIME type of the source data.",
          "type": "string"
        }
      },
      "description": "URI based data."
    },
    "TuningExamples": {
      "description": "A set of tuning examples. Can be training or validation data.",
      "id": "TuningExamples",
      "type": "object",
      "properties": {
        "examples": {
          "items": {
            "$ref": "TuningExample"
          },
          "description": "The examples. Example input can be for text or discuss, but all examples in a set must be of the same type.",
          "type": "array"
        }
      }
    },
    "PredictResponse": {
      "properties": {
        "predictions": {
          "type": "array",
          "description": "The outputs of the prediction call.",
          "items": {
            "type": "any"
          }
        }
      },
      "id": "PredictResponse",
      "description": "Response message for [PredictionService.Predict].",
      "type": "object"
    },
    "ContentEmbedding": {
      "description": "A list of floats representing an embedding.",
      "properties": {
        "values": {
          "description": "The embedding values.",
          "type": "array",
          "items": {
            "format": "float",
            "type": "number"
          }
        }
      },
      "type": "object",
      "id": "ContentEmbedding"
    },
    "ExecutableCode": {
      "type": "object",
      "description": "Code generated by the model that is meant to be executed, and the result returned to the model. Only generated when using the `CodeExecution` tool, in which the code will be automatically executed, and a corresponding `CodeExecutionResult` will also be generated.",
      "id": "ExecutableCode",
      "properties": {
        "language": {
          "type": "string",
          "enumDescriptions": [
            "Unspecified language. This value should not be used.",
            "Python >= 3.10, with numpy and simpy available."
          ],
          "enum": [
            "LANGUAGE_UNSPECIFIED",
            "PYTHON"
          ],
          "description": "Required. Programming language of the `code`."
        },
        "code": {
          "type": "string",
          "description": "Required. The code to be executed."
        }
      }
    },
    "GenerateContentBatch": {
      "description": "A resource representing a batch of `GenerateContent` requests.",
      "type": "object",
      "id": "GenerateContentBatch",
      "properties": {
        "updateTime": {
          "description": "Output only. The time at which the batch was last updated.",
          "readOnly": true,
          "type": "string",
          "format": "google-datetime"
        },
        "priority": {
          "format": "int64",
          "type": "string",
          "description": "Optional. The priority of the batch. Batches with a higher priority value will be processed before batches with a lower priority value. Negative values are allowed. Default is 0."
        },
        "model": {
          "description": "Required. The name of the `Model` to use for generating the completion. Format: `models/{model}`.",
          "type": "string"
        },
        "name": {
          "description": "Output only. Identifier. Resource name of the batch. Format: `batches/{batch_id}`.",
          "type": "string",
          "readOnly": true
        },
        "displayName": {
          "description": "Required. The user-defined name of this batch.",
          "type": "string"
        },
        "inputConfig": {
          "$ref": "InputConfig",
          "description": "Required. Input configuration of the instances on which batch processing are performed."
        },
        "endTime": {
          "format": "google-datetime",
          "readOnly": true,
          "description": "Output only. The time at which the batch processing completed.",
          "type": "string"
        },
        "output": {
          "$ref": "GenerateContentBatchOutput",
          "description": "Output only. The output of the batch request.",
          "readOnly": true
        },
        "state": {
          "enumDescriptions": [
            "The batch state is unspecified.",
            "The service is preparing to run the batch.",
            "The batch is in progress.",
            "The batch completed successfully.",
            "The batch failed.",
            "The batch has been cancelled.",
            "The batch has expired."
          ],
          "type": "string",
          "enum": [
            "BATCH_STATE_UNSPECIFIED",
            "BATCH_STATE_PENDING",
            "BATCH_STATE_RUNNING",
            "BATCH_STATE_SUCCEEDED",
            "BATCH_STATE_FAILED",
            "BATCH_STATE_CANCELLED",
            "BATCH_STATE_EXPIRED"
          ],
          "description": "Output only. The state of the batch.",
          "readOnly": true
        },
        "createTime": {
          "description": "Output only. The time at which the batch was created.",
          "type": "string",
          "readOnly": true,
          "format": "google-datetime"
        },
        "batchStats": {
          "readOnly": true,
          "description": "Output only. Stats about the batch.",
          "$ref": "BatchStats"
        }
      }
    },
    "InlinedEmbedContentResponse": {
      "description": "The response to a single request in the batch.",
      "id": "InlinedEmbedContentResponse",
      "type": "object",
      "properties": {
        "error": {
          "$ref": "Status",
          "readOnly": true,
          "description": "Output only. The error encountered while processing the request."
        },
        "response": {
          "description": "Output only. The response to the request.",
          "$ref": "EmbedContentResponse",
          "readOnly": true
        },
        "metadata": {
          "additionalProperties": {
            "description": "Properties of the object.",
            "type": "any"
          },
          "description": "Output only. The metadata associated with the request.",
          "type": "object",
          "readOnly": true
        }
      }
    },
    "RelevantChunk": {
      "type": "object",
      "properties": {
        "chunkRelevanceScore": {
          "format": "float",
          "description": "`Chunk` relevance to the query.",
          "type": "number"
        },
        "document": {
          "description": "`Document` associated with the chunk.",
          "$ref": "Document"
        },
        "chunk": {
          "$ref": "Chunk",
          "description": "`Chunk` associated with the query."
        }
      },
      "description": "The information for a chunk relevant to a query.",
      "id": "RelevantChunk"
    },
    "ListFilesResponse": {
      "description": "Response for `ListFiles`.",
      "properties": {
        "nextPageToken": {
          "type": "string",
          "description": "A token that can be sent as a `page_token` into a subsequent `ListFiles` call."
        },
        "files": {
          "type": "array",
          "items": {
            "$ref": "File"
          },
          "description": "The list of `File`s."
        }
      },
      "id": "ListFilesResponse",
      "type": "object"
    },
    "GenerateAnswerRequest": {
      "id": "GenerateAnswerRequest",
      "description": "Request to generate a grounded answer from the `Model`.",
      "type": "object",
      "properties": {
        "answerStyle": {
          "type": "string",
          "description": "Required. Style in which answers should be returned.",
          "enumDescriptions": [
            "Unspecified answer style.",
            "Succinct but abstract style.",
            "Very brief and extractive style.",
            "Verbose style including extra details. The response may be formatted as a sentence, paragraph, multiple paragraphs, or bullet points, etc."
          ],
          "enum": [
            "ANSWER_STYLE_UNSPECIFIED",
            "ABSTRACTIVE",
            "EXTRACTIVE",
            "VERBOSE"
          ]
        },
        "inlinePassages": {
          "description": "Passages provided inline with the request.",
          "$ref": "GroundingPassages"
        },
        "contents": {
          "description": "Required. The content of the current conversation with the `Model`. For single-turn queries, this is a single question to answer. For multi-turn queries, this is a repeated field that contains conversation history and the last `Content` in the list containing the question. Note: `GenerateAnswer` only supports queries in English.",
          "type": "array",
          "items": {
            "$ref": "Content"
          }
        },
        "safetySettings": {
          "description": "Optional. A list of unique `SafetySetting` instances for blocking unsafe content. This will be enforced on the `GenerateAnswerRequest.contents` and `GenerateAnswerResponse.candidate`. There should not be more than one setting for each `SafetyCategory` type. The API will block any contents and responses that fail to meet the thresholds set by these settings. This list overrides the default settings for each `SafetyCategory` specified in the safety_settings. If there is no `SafetySetting` for a given `SafetyCategory` provided in the list, the API will use the default safety setting for that category. Harm categories HARM_CATEGORY_HATE_SPEECH, HARM_CATEGORY_SEXUALLY_EXPLICIT, HARM_CATEGORY_DANGEROUS_CONTENT, HARM_CATEGORY_HARASSMENT are supported. Refer to the [guide](https://ai.google.dev/gemini-api/docs/safety-settings) for detailed information on available safety settings. Also refer to the [Safety guidance](https://ai.google.dev/gemini-api/docs/safety-guidance) to learn how to incorporate safety considerations in your AI applications.",
          "items": {
            "$ref": "SafetySetting"
          },
          "type": "array"
        },
        "semanticRetriever": {
          "$ref": "SemanticRetrieverConfig",
          "description": "Content retrieved from resources created via the Semantic Retriever API."
        },
        "temperature": {
          "description": "Optional. Controls the randomness of the output. Values can range from [0.0,1.0], inclusive. A value closer to 1.0 will produce responses that are more varied and creative, while a value closer to 0.0 will typically result in more straightforward responses from the model. A low temperature (~0.2) is usually recommended for Attributed-Question-Answering use cases.",
          "type": "number",
          "format": "float"
        }
      }
    },
    "Hyperparameters": {
      "properties": {
        "learningRate": {
          "description": "Optional. Immutable. The learning rate hyperparameter for tuning. If not set, a default of 0.001 or 0.0002 will be calculated based on the number of training examples.",
          "format": "float",
          "type": "number"
        },
        "batchSize": {
          "format": "int32",
          "description": "Immutable. The batch size hyperparameter for tuning. If not set, a default of 4 or 16 will be used based on the number of training examples.",
          "type": "integer"
        },
        "learningRateMultiplier": {
          "type": "number",
          "format": "float",
          "description": "Optional. Immutable. The learning rate multiplier is used to calculate a final learning_rate based on the default (recommended) value. Actual learning rate := learning_rate_multiplier * default learning rate Default learning rate is dependent on base model and dataset size. If not set, a default of 1.0 will be used."
        },
        "epochCount": {
          "format": "int32",
          "type": "integer",
          "description": "Immutable. The number of training epochs. An epoch is one pass through the training data. If not set, a default of 5 will be used."
        }
      },
      "description": "Hyperparameters controlling the tuning process. Read more at https://ai.google.dev/docs/model_tuning_guidance",
      "id": "Hyperparameters",
      "type": "object"
    },
    "InputEmbedContentConfig": {
      "type": "object",
      "properties": {
        "requests": {
          "description": "The requests to be processed in the batch.",
          "$ref": "InlinedEmbedContentRequests"
        },
        "fileName": {
          "type": "string",
          "description": "The name of the `File` containing the input requests."
        }
      },
      "id": "InputEmbedContentConfig",
      "description": "Configures the input to the batch request."
    },
    "GenerationConfig": {
      "type": "object",
      "properties": {
        "presencePenalty": {
          "type": "number",
          "format": "float",
          "description": "Optional. Presence penalty applied to the next token's logprobs if the token has already been seen in the response. This penalty is binary on/off and not dependant on the number of times the token is used (after the first). Use frequency_penalty for a penalty that increases with each use. A positive penalty will discourage the use of tokens that have already been used in the response, increasing the vocabulary. A negative penalty will encourage the use of tokens that have already been used in the response, decreasing the vocabulary."
        },
        "responseLogprobs": {
          "type": "boolean",
          "description": "Optional. If true, export the logprobs results in response."
        },
        "thinkingConfig": {
          "description": "Optional. Config for thinking features. An error will be returned if this field is set for models that don't support thinking.",
          "$ref": "ThinkingConfig"
        },
        "candidateCount": {
          "description": "Optional. Number of generated responses to return. If unset, this will default to 1. Please note that this doesn't work for previous generation models (Gemini 1.0 family)",
          "format": "int32",
          "type": "integer"
        },
        "speechConfig": {
          "description": "Optional. The speech generation config.",
          "$ref": "SpeechConfig"
        },
        "topP": {
          "format": "float",
          "type": "number",
          "description": "Optional. The maximum cumulative probability of tokens to consider when sampling. The model uses combined Top-k and Top-p (nucleus) sampling. Tokens are sorted based on their assigned probabilities so that only the most likely tokens are considered. Top-k sampling directly limits the maximum number of tokens to consider, while Nucleus sampling limits the number of tokens based on the cumulative probability. Note: The default value varies by `Model` and is specified by the`Model.top_p` attribute returned from the `getModel` function. An empty `top_k` attribute indicates that the model doesn't apply top-k sampling and doesn't allow setting `top_k` on requests."
        },
        "responseMimeType": {
          "type": "string",
          "description": "Optional. MIME type of the generated candidate text. Supported MIME types are: `text/plain`: (default) Text output. `application/json`: JSON response in the response candidates. `text/x.enum`: ENUM as a string response in the response candidates. Refer to the [docs](https://ai.google.dev/gemini-api/docs/prompting_with_media#plain_text_formats) for a list of all supported text MIME types."
        },
        "_responseJsonSchema": {
          "description": "Optional. Output schema of the generated response. This is an alternative to `response_schema` that accepts [JSON Schema](https://json-schema.org/). If set, `response_schema` must be omitted, but `response_mime_type` is required. While the full JSON Schema may be sent, not all features are supported. Specifically, only the following properties are supported: - `$id` - `$defs` - `$ref` - `$anchor` - `type` - `format` - `title` - `description` - `enum` (for strings and numbers) - `items` - `prefixItems` - `minItems` - `maxItems` - `minimum` - `maximum` - `anyOf` - `oneOf` (interpreted the same as `anyOf`) - `properties` - `additionalProperties` - `required` The non-standard `propertyOrdering` property may also be set. Cyclic references are unrolled to a limited degree and, as such, may only be used within non-required properties. (Nullable properties are not sufficient.) If `$ref` is set on a sub-schema, no other properties, except for than those starting as a `$`, may be set.",
          "type": "any"
        },
        "seed": {
          "type": "integer",
          "description": "Optional. Seed used in decoding. If not set, the request uses a randomly generated seed.",
          "format": "int32"
        },
        "responseJsonSchema": {
          "description": "Optional. An internal detail. Use `responseJsonSchema` rather than this field.",
          "type": "any"
        },
        "responseModalities": {
          "type": "array",
          "items": {
            "enum": [
              "MODALITY_UNSPECIFIED",
              "TEXT",
              "IMAGE",
              "AUDIO"
            ],
            "enumDescriptions": [
              "Default value.",
              "Indicates the model should return text.",
              "Indicates the model should return images.",
              "Indicates the model should return audio."
            ],
            "type": "string"
          },
          "description": "Optional. The requested modalities of the response. Represents the set of modalities that the model can return, and should be expected in the response. This is an exact match to the modalities of the response. A model may have multiple combinations of supported modalities. If the requested modalities do not match any of the supported combinations, an error will be returned. An empty list is equivalent to requesting only text."
        },
        "temperature": {
          "type": "number",
          "description": "Optional. Controls the randomness of the output. Note: The default value varies by model, see the `Model.temperature` attribute of the `Model` returned from the `getModel` function. Values can range from [0.0, 2.0].",
          "format": "float"
        },
        "maxOutputTokens": {
          "description": "Optional. The maximum number of tokens to include in a response candidate. Note: The default value varies by model, see the `Model.output_token_limit` attribute of the `Model` returned from the `getModel` function.",
          "format": "int32",
          "type": "integer"
        },
        "frequencyPenalty": {
          "format": "float",
          "type": "number",
          "description": "Optional. Frequency penalty applied to the next token's logprobs, multiplied by the number of times each token has been seen in the respponse so far. A positive penalty will discourage the use of tokens that have already been used, proportional to the number of times the token has been used: The more a token is used, the more difficult it is for the model to use that token again increasing the vocabulary of responses. Caution: A _negative_ penalty will encourage the model to reuse tokens proportional to the number of times the token has been used. Small negative values will reduce the vocabulary of a response. Larger negative values will cause the model to start repeating a common token until it hits the max_output_tokens limit."
        },
        "enableEnhancedCivicAnswers": {
          "description": "Optional. Enables enhanced civic answers. It may not be available for all models.",
          "type": "boolean"
        },
        "responseSchema": {
          "$ref": "Schema",
          "description": "Optional. Output schema of the generated candidate text. Schemas must be a subset of the [OpenAPI schema](https://spec.openapis.org/oas/v3.0.3#schema) and can be objects, primitives or arrays. If set, a compatible `response_mime_type` must also be set. Compatible MIME types: `application/json`: Schema for JSON response. Refer to the [JSON text generation guide](https://ai.google.dev/gemini-api/docs/json-mode) for more details."
        },
        "mediaResolution": {
          "type": "string",
          "enumDescriptions": [
            "Media resolution has not been set.",
            "Media resolution set to low (64 tokens).",
            "Media resolution set to medium (256 tokens).",
            "Media resolution set to high (zoomed reframing with 256 tokens)."
          ],
          "enum": [
            "MEDIA_RESOLUTION_UNSPECIFIED",
            "MEDIA_RESOLUTION_LOW",
            "MEDIA_RESOLUTION_MEDIUM",
            "MEDIA_RESOLUTION_HIGH"
          ],
          "description": "Optional. If specified, the media resolution specified will be used."
        },
        "logprobs": {
          "description": "Optional. Only valid if response_logprobs=True. This sets the number of top logprobs to return at each decoding step in the Candidate.logprobs_result. The number must be in the range of [0, 20].",
          "format": "int32",
          "type": "integer"
        },
        "topK": {
          "format": "int32",
          "type": "integer",
          "description": "Optional. The maximum number of tokens to consider when sampling. Gemini models use Top-p (nucleus) sampling or a combination of Top-k and nucleus sampling. Top-k sampling considers the set of `top_k` most probable tokens. Models running with nucleus sampling don't allow top_k setting. Note: The default value varies by `Model` and is specified by the`Model.top_p` attribute returned from the `getModel` function. An empty `top_k` attribute indicates that the model doesn't apply top-k sampling and doesn't allow setting `top_k` on requests."
        },
        "imageConfig": {
          "$ref": "ImageConfig",
          "description": "Optional. Config for image generation. An error will be returned if this field is set for models that don't support these config options."
        },
        "stopSequences": {
          "items": {
            "type": "string"
          },
          "description": "Optional. The set of character sequences (up to 5) that will stop output generation. If specified, the API will stop at the first appearance of a `stop_sequence`. The stop sequence will not be included as part of the response.",
          "type": "array"
        }
      },
      "id": "GenerationConfig",
      "description": "Configuration options for model generation and outputs. Not all parameters are configurable for every model. Next ID: 30"
    },
    "ChunkData": {
      "description": "Extracted data that represents the `Chunk` content.",
      "type": "object",
      "properties": {
        "stringValue": {
          "description": "The `Chunk` content as a string. The maximum number of tokens per chunk is 2043.",
          "type": "string"
        }
      },
      "id": "ChunkData"
    },
    "FunctionResponse": {
      "id": "FunctionResponse",
      "properties": {
        "willContinue": {
          "description": "Optional. Signals that function call continues, and more responses will be returned, turning the function call into a generator. Is only applicable to NON_BLOCKING function calls, is ignored otherwise. If set to false, future responses will not be considered. It is allowed to return empty `response` with `will_continue=False` to signal that the function call is finished. This may still trigger the model generation. To avoid triggering the generation and finish the function call, additionally set `scheduling` to `SILENT`.",
          "type": "boolean"
        },
        "name": {
          "description": "Required. The name of the function to call. Must be a-z, A-Z, 0-9, or contain underscores and dashes, with a maximum length of 64.",
          "type": "string"
        },
        "scheduling": {
          "description": "Optional. Specifies how the response should be scheduled in the conversation. Only applicable to NON_BLOCKING function calls, is ignored otherwise. Defaults to WHEN_IDLE.",
          "enum": [
            "SCHEDULING_UNSPECIFIED",
            "SILENT",
            "WHEN_IDLE",
            "INTERRUPT"
          ],
          "enumDescriptions": [
            "This value is unused.",
            "Only add the result to the conversation context, do not interrupt or trigger generation.",
            "Add the result to the conversation context, and prompt to generate output without interrupting ongoing generation.",
            "Add the result to the conversation context, interrupt ongoing generation and prompt to generate output."
          ],
          "type": "string"
        },
        "id": {
          "description": "Optional. The id of the function call this response is for. Populated by the client to match the corresponding function call `id`.",
          "type": "string"
        },
        "parts": {
          "items": {
            "$ref": "FunctionResponsePart"
          },
          "description": "Optional. Ordered `Parts` that constitute a function response. Parts may have different IANA MIME types.",
          "type": "array"
        },
        "response": {
          "additionalProperties": {
            "description": "Properties of the object.",
            "type": "any"
          },
          "description": "Required. The function response in JSON object format. Callers can use any keys of their choice that fit the function's syntax to return the function output, e.g. \"output\", \"result\", etc. In particular, if the function call failed to execute, the response can have an \"error\" key to return error details to the model.",
          "type": "object"
        }
      },
      "type": "object",
      "description": "The result output from a `FunctionCall` that contains a string representing the `FunctionDeclaration.name` and a structured JSON object containing any output from the function is used as context to the model. This should contain the result of a`FunctionCall` made based on model prediction."
    },
    "RetrievalResource": {
      "id": "RetrievalResource",
      "description": "The semantic retrieval resource to retrieve from.",
      "type": "object",
      "properties": {
        "ragStoreName": {
          "type": "string",
          "description": "Required. The name of the semantic retrieval resource to retrieve from. Example: `ragStores/my-rag-store-123`"
        }
      }
    },
    "InlinedEmbedContentRequests": {
      "type": "object",
      "id": "InlinedEmbedContentRequests",
      "description": "The requests to be processed in the batch if provided as part of the batch creation request.",
      "properties": {
        "requests": {
          "description": "Required. The requests to be processed in the batch.",
          "type": "array",
          "items": {
            "$ref": "InlinedEmbedContentRequest"
          }
        }
      }
    },
    "ModalityTokenCount": {
      "properties": {
        "modality": {
          "enumDescriptions": [
            "Unspecified modality.",
            "Plain text.",
            "Image.",
            "Video.",
            "Audio.",
            "Document, e.g. PDF."
          ],
          "type": "string",
          "enum": [
            "MODALITY_UNSPECIFIED",
            "TEXT",
            "IMAGE",
            "VIDEO",
            "AUDIO",
            "DOCUMENT"
          ],
          "description": "The modality associated with this token count."
        },
        "tokenCount": {
          "type": "integer",
          "description": "Number of tokens.",
          "format": "int32"
        }
      },
      "description": "Represents token counting info for a single modality.",
      "id": "ModalityTokenCount",
      "type": "object"
    },
    "InputConfig": {
      "description": "Configures the input to the batch request.",
      "type": "object",
      "id": "InputConfig",
      "properties": {
        "fileName": {
          "description": "The name of the `File` containing the input requests.",
          "type": "string"
        },
        "requests": {
          "description": "The requests to be processed in the batch.",
          "$ref": "InlinedRequests"
        }
      }
    },
    "BatchDeleteChunksRequest": {
      "properties": {
        "requests": {
          "description": "Required. The request messages specifying the `Chunk`s to delete.",
          "type": "array",
          "items": {
            "$ref": "DeleteChunkRequest"
          }
        }
      },
      "type": "object",
      "description": "Request to batch delete `Chunk`s.",
      "id": "BatchDeleteChunksRequest"
    },
    "ImageConfig": {
      "properties": {
        "aspectRatio": {
          "type": "string",
          "description": "Optional. The aspect ratio of the image to generate. Supported aspect ratios: 1:1, 2:3, 3:2, 3:4, 4:3, 9:16, 16:9, 21:9. If not specified, the model will choose a default aspect ratio based on any reference images provided."
        }
      },
      "id": "ImageConfig",
      "type": "object",
      "description": "Config for image generation features."
    },
    "FileSearchRetrievalConfig": {
      "id": "FileSearchRetrievalConfig",
      "type": "object",
      "properties": {
        "metadataFilter": {
          "description": "Optional. Metadata filter to apply to the semantic retrieval documents and chunks.",
          "type": "string"
        },
        "topK": {
          "description": "Optional. The number of semantic retrieval chunks to retrieve.",
          "format": "int32",
          "type": "integer"
        }
      },
      "description": "Semantic retrieval configuration."
    },
    "CodeExecutionResult": {
      "id": "CodeExecutionResult",
      "description": "Result of executing the `ExecutableCode`. Only generated when using the `CodeExecution`, and always follows a `part` containing the `ExecutableCode`.",
      "properties": {
        "outcome": {
          "description": "Required. Outcome of the code execution.",
          "enumDescriptions": [
            "Unspecified status. This value should not be used.",
            "Code execution completed successfully.",
            "Code execution finished but with a failure. `stderr` should contain the reason.",
            "Code execution ran for too long, and was cancelled. There may or may not be a partial output present."
          ],
          "enum": [
            "OUTCOME_UNSPECIFIED",
            "OUTCOME_OK",
            "OUTCOME_FAILED",
            "OUTCOME_DEADLINE_EXCEEDED"
          ],
          "type": "string"
        },
        "output": {
          "type": "string",
          "description": "Optional. Contains stdout when code execution is successful, stderr or other description otherwise."
        }
      },
      "type": "object"
    },
    "FunctionDeclaration": {
      "id": "FunctionDeclaration",
      "type": "object",
      "properties": {
        "description": {
          "description": "Required. A brief description of the function.",
          "type": "string"
        },
        "parametersJsonSchema": {
          "description": "Optional. Describes the parameters to the function in JSON Schema format. The schema must describe an object where the properties are the parameters to the function. For example: ``` { \"type\": \"object\", \"properties\": { \"name\": { \"type\": \"string\" }, \"age\": { \"type\": \"integer\" } }, \"additionalProperties\": false, \"required\": [\"name\", \"age\"], \"propertyOrdering\": [\"name\", \"age\"] } ``` This field is mutually exclusive with `parameters`.",
          "type": "any"
        },
        "response": {
          "description": "Optional. Describes the output from this function in JSON Schema format. Reflects the Open API 3.03 Response Object. The Schema defines the type used for the response value of the function.",
          "$ref": "Schema"
        },
        "name": {
          "type": "string",
          "description": "Required. The name of the function. Must be a-z, A-Z, 0-9, or contain underscores, colons, dots, and dashes, with a maximum length of 64."
        },
        "parameters": {
          "description": "Optional. Describes the parameters to this function. Reflects the Open API 3.03 Parameter Object string Key: the name of the parameter. Parameter names are case sensitive. Schema Value: the Schema defining the type used for the parameter.",
          "$ref": "Schema"
        },
        "responseJsonSchema": {
          "description": "Optional. Describes the output from this function in JSON Schema format. The value specified by the schema is the response value of the function. This field is mutually exclusive with `response`.",
          "type": "any"
        },
        "behavior": {
          "type": "string",
          "description": "Optional. Specifies the function Behavior. Currently only supported by the BidiGenerateContent method.",
          "enumDescriptions": [
            "This value is unused.",
            "If set, the system will wait to receive the function response before continuing the conversation.",
            "If set, the system will not wait to receive the function response. Instead, it will attempt to handle function responses as they become available while maintaining the conversation between the user and the model."
          ],
          "enum": [
            "UNSPECIFIED",
            "BLOCKING",
            "NON_BLOCKING"
          ]
        }
      },
      "description": "Structured representation of a function declaration as defined by the [OpenAPI 3.03 specification](https://spec.openapis.org/oas/v3.0.3). Included in this declaration are the function name and parameters. This FunctionDeclaration is a representation of a block of code that can be used as a `Tool` by the model and executed by the client."
    },
    "DownloadFileResponse": {
      "description": "Response for `DownloadFile`.",
      "type": "object",
      "id": "DownloadFileResponse",
      "properties": {}
    },
    "BatchEmbedContentsResponse": {
      "properties": {
        "embeddings": {
          "readOnly": true,
          "description": "Output only. The embeddings for each request, in the same order as provided in the batch request.",
          "items": {
            "$ref": "ContentEmbedding"
          },
          "type": "array"
        }
      },
      "type": "object",
      "description": "The response to a `BatchEmbedContentsRequest`.",
      "id": "BatchEmbedContentsResponse"
    },
    "UploadToRagStoreRequest": {
      "id": "UploadToRagStoreRequest",
      "properties": {
        "chunkingConfig": {
          "description": "Optional. Config for telling the service how to chunk the data. If not provided, the service will use default parameters.",
          "$ref": "ChunkingConfig"
        },
        "customMetadata": {
          "items": {
            "$ref": "CustomMetadata"
          },
          "type": "array",
          "description": "Custom metadata to be associated with the data."
        },
        "mimeType": {
          "type": "string",
          "description": "Optional. MIME type of the data. If not provided, it will be inferred from the uploaded content."
        },
        "displayName": {
          "description": "Optional. Display name of the created document.",
          "type": "string"
        }
      },
      "type": "object",
      "description": "Request for `UploadToRagStore`."
    },
    "PromptFeedback": {
      "id": "PromptFeedback",
      "description": "A set of the feedback metadata the prompt specified in `GenerateContentRequest.content`.",
      "type": "object",
      "properties": {
        "blockReason": {
          "enum": [
            "BLOCK_REASON_UNSPECIFIED",
            "SAFETY",
            "OTHER",
            "BLOCKLIST",
            "PROHIBITED_CONTENT",
            "IMAGE_SAFETY"
          ],
          "type": "string",
          "description": "Optional. If set, the prompt was blocked and no candidates are returned. Rephrase the prompt.",
          "enumDescriptions": [
            "Default value. This value is unused.",
            "Prompt was blocked due to safety reasons. Inspect `safety_ratings` to understand which safety category blocked it.",
            "Prompt was blocked due to unknown reasons.",
            "Prompt was blocked due to the terms which are included from the terminology blocklist.",
            "Prompt was blocked due to prohibited content.",
            "Candidates blocked due to unsafe image generation content."
          ]
        },
        "safetyRatings": {
          "type": "array",
          "items": {
            "$ref": "SafetyRating"
          },
          "description": "Ratings for safety of the prompt. There is at most one rating per category."
        }
      }
    },
    "ComputerUse": {
      "description": "Computer Use tool type.",
      "id": "ComputerUse",
      "properties": {
        "environment": {
          "type": "string",
          "description": "Required. The environment being operated.",
          "enum": [
            "ENVIRONMENT_UNSPECIFIED",
            "ENVIRONMENT_BROWSER"
          ],
          "enumDescriptions": [
            "Defaults to browser.",
            "Operates in a web browser."
          ]
        },
        "excludedPredefinedFunctions": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Optional. By default, predefined functions are included in the final model call. Some of them can be explicitly excluded from being automatically included. This can serve two purposes: 1. Using a more restricted / different action space. 2. Improving the definitions / instructions of predefined functions."
        }
      },
      "type": "object"
    },
    "TuningTask": {
      "description": "Tuning tasks that create tuned models.",
      "type": "object",
      "properties": {
        "trainingData": {
          "description": "Required. Input only. Immutable. The model training data.",
          "$ref": "Dataset"
        },
        "hyperparameters": {
          "description": "Immutable. Hyperparameters controlling the tuning process. If not provided, default values will be used.",
          "$ref": "Hyperparameters"
        },
        "completeTime": {
          "type": "string",
          "description": "Output only. The timestamp when tuning this model completed.",
          "readOnly": true,
          "format": "google-datetime"
        },
        "snapshots": {
          "description": "Output only. Metrics collected during tuning.",
          "items": {
            "$ref": "TuningSnapshot"
          },
          "readOnly": true,
          "type": "array"
        },
        "startTime": {
          "description": "Output only. The timestamp when tuning this model started.",
          "format": "google-datetime",
          "type": "string",
          "readOnly": true
        }
      },
      "id": "TuningTask"
    },
    "PredictRequest": {
      "id": "PredictRequest",
      "description": "Request message for PredictionService.Predict.",
      "type": "object",
      "properties": {
        "instances": {
          "type": "array",
          "items": {
            "type": "any"
          },
          "description": "Required. The instances that are the input to the prediction call."
        },
        "parameters": {
          "description": "Optional. The parameters that govern the prediction call.",
          "type": "any"
        }
      }
    },
    "GenerateContentRequest": {
      "type": "object",
      "properties": {
        "tools": {
          "type": "array",
          "description": "Optional. A list of `Tools` the `Model` may use to generate the next response. A `Tool` is a piece of code that enables the system to interact with external systems to perform an action, or set of actions, outside of knowledge and scope of the `Model`. Supported `Tool`s are `Function` and `code_execution`. Refer to the [Function calling](https://ai.google.dev/gemini-api/docs/function-calling) and the [Code execution](https://ai.google.dev/gemini-api/docs/code-execution) guides to learn more.",
          "items": {
            "$ref": "Tool"
          }
        },
        "model": {
          "type": "string",
          "description": "Required. The name of the `Model` to use for generating the completion. Format: `models/{model}`."
        },
        "safetySettings": {
          "type": "array",
          "items": {
            "$ref": "SafetySetting"
          },
          "description": "Optional. A list of unique `SafetySetting` instances for blocking unsafe content. This will be enforced on the `GenerateContentRequest.contents` and `GenerateContentResponse.candidates`. There should not be more than one setting for each `SafetyCategory` type. The API will block any contents and responses that fail to meet the thresholds set by these settings. This list overrides the default settings for each `SafetyCategory` specified in the safety_settings. If there is no `SafetySetting` for a given `SafetyCategory` provided in the list, the API will use the default safety setting for that category. Harm categories HARM_CATEGORY_HATE_SPEECH, HARM_CATEGORY_SEXUALLY_EXPLICIT, HARM_CATEGORY_DANGEROUS_CONTENT, HARM_CATEGORY_HARASSMENT, HARM_CATEGORY_CIVIC_INTEGRITY are supported. Refer to the [guide](https://ai.google.dev/gemini-api/docs/safety-settings) for detailed information on available safety settings. Also refer to the [Safety guidance](https://ai.google.dev/gemini-api/docs/safety-guidance) to learn how to incorporate safety considerations in your AI applications."
        },
        "toolConfig": {
          "$ref": "ToolConfig",
          "description": "Optional. Tool configuration for any `Tool` specified in the request. Refer to the [Function calling guide](https://ai.google.dev/gemini-api/docs/function-calling#function_calling_mode) for a usage example."
        },
        "systemInstruction": {
          "description": "Optional. Developer set [system instruction(s)](https://ai.google.dev/gemini-api/docs/system-instructions). Currently, text only.",
          "$ref": "Content"
        },
        "contents": {
          "type": "array",
          "description": "Required. The content of the current conversation with the model. For single-turn queries, this is a single instance. For multi-turn queries like [chat](https://ai.google.dev/gemini-api/docs/text-generation#chat), this is a repeated field that contains the conversation history and the latest request.",
          "items": {
            "$ref": "Content"
          }
        },
        "cachedContent": {
          "type": "string",
          "description": "Optional. The name of the content [cached](https://ai.google.dev/gemini-api/docs/caching) to use as context to serve the prediction. Format: `cachedContents/{cachedContent}`"
        },
        "generationConfig": {
          "$ref": "GenerationConfig",
          "description": "Optional. Configuration options for model generation and outputs."
        }
      },
      "id": "GenerateContentRequest",
      "description": "Request to generate a completion from the model. NEXT ID: 18"
    },
    "Message": {
      "id": "Message",
      "description": "The base unit of structured text. A `Message` includes an `author` and the `content` of the `Message`. The `author` is used to tag messages when they are fed to the model as text.",
      "properties": {
        "citationMetadata": {
          "readOnly": true,
          "description": "Output only. Citation information for model-generated `content` in this `Message`. If this `Message` was generated as output from the model, this field may be populated with attribution information for any text included in the `content`. This field is used only on output.",
          "$ref": "CitationMetadata"
        },
        "author": {
          "type": "string",
          "description": "Optional. The author of this Message. This serves as a key for tagging the content of this Message when it is fed to the model as text. The author can be any alphanumeric string."
        },
        "content": {
          "description": "Required. The text content of the structured `Message`.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "TextPrompt": {
      "description": "Text given to the model as a prompt. The Model will use this TextPrompt to Generate a text completion.",
      "id": "TextPrompt",
      "properties": {
        "text": {
          "type": "string",
          "description": "Required. The prompt text."
        }
      },
      "type": "object"
    },
    "ListRagStoresResponse": {
      "description": "Response from `ListRagStores` containing a paginated list of `RagStores`. The results are sorted by ascending `rag_store.create_time`.",
      "properties": {
        "ragStores": {
          "description": "The returned rag_stores.",
          "items": {
            "$ref": "RagStore"
          },
          "type": "array"
        },
        "nextPageToken": {
          "type": "string",
          "description": "A token, which can be sent as `page_token` to retrieve the next page. If this field is omitted, there are no more pages."
        }
      },
      "type": "object",
      "id": "ListRagStoresResponse"
    },
    "ListPermissionsResponse": {
      "description": "Response from `ListPermissions` containing a paginated list of permissions.",
      "id": "ListPermissionsResponse",
      "type": "object",
      "properties": {
        "nextPageToken": {
          "type": "string",
          "description": "A token, which can be sent as `page_token` to retrieve the next page. If this field is omitted, there are no more pages."
        },
        "permissions": {
          "items": {
            "$ref": "Permission"
          },
          "type": "array",
          "description": "Returned permissions."
        }
      }
    },
    "GroundingPassages": {
      "id": "GroundingPassages",
      "properties": {
        "passages": {
          "items": {
            "$ref": "GroundingPassage"
          },
          "description": "List of passages.",
          "type": "array"
        }
      },
      "description": "A repeated list of passages.",
      "type": "object"
    },
    "BatchEmbedTextRequest": {
      "type": "object",
      "description": "Batch request to get a text embedding from the model.",
      "properties": {
        "texts": {
          "items": {
            "type": "string"
          },
          "description": "Optional. The free-form input texts that the model will turn into an embedding. The current limit is 100 texts, over which an error will be thrown.",
          "type": "array"
        },
        "requests": {
          "description": "Optional. Embed requests for the batch. Only one of `texts` or `requests` can be set.",
          "items": {
            "$ref": "EmbedTextRequest"
          },
          "type": "array"
        }
      },
      "id": "BatchEmbedTextRequest"
    },
    "EmbedTextRequest": {
      "description": "Request to get a text embedding from the model.",
      "type": "object",
      "properties": {
        "text": {
          "description": "Optional. The free-form input text that the model will turn into an embedding.",
          "type": "string"
        },
        "model": {
          "type": "string",
          "description": "Required. The model name to use with the format model=models/{model}."
        }
      },
      "id": "EmbedTextRequest"
    },
    "MultiSpeakerVoiceConfig": {
      "id": "MultiSpeakerVoiceConfig",
      "type": "object",
      "description": "The configuration for the multi-speaker setup.",
      "properties": {
        "speakerVoiceConfigs": {
          "description": "Required. All the enabled speaker voices.",
          "type": "array",
          "items": {
            "$ref": "SpeakerVoiceConfig"
          }
        }
      }
    },
    "ListGeneratedFilesResponse": {
      "properties": {
        "generatedFiles": {
          "description": "The list of `GeneratedFile`s.",
          "type": "array",
          "items": {
            "$ref": "GeneratedFile"
          }
        },
        "nextPageToken": {
          "description": "A token that can be sent as a `page_token` into a subsequent `ListGeneratedFiles` call.",
          "type": "string"
        }
      },
      "id": "ListGeneratedFilesResponse",
      "description": "Response for `ListGeneratedFiles`.",
      "type": "object"
    },
    "GenerateTextRequest": {
      "type": "object",
      "properties": {
        "maxOutputTokens": {
          "description": "Optional. The maximum number of tokens to include in a candidate. If unset, this will default to output_token_limit specified in the `Model` specification.",
          "type": "integer",
          "format": "int32"
        },
        "topP": {
          "type": "number",
          "format": "float",
          "description": "Optional. The maximum cumulative probability of tokens to consider when sampling. The model uses combined Top-k and nucleus sampling. Tokens are sorted based on their assigned probabilities so that only the most likely tokens are considered. Top-k sampling directly limits the maximum number of tokens to consider, while Nucleus sampling limits number of tokens based on the cumulative probability. Note: The default value varies by model, see the `Model.top_p` attribute of the `Model` returned the `getModel` function."
        },
        "prompt": {
          "description": "Required. The free-form input text given to the model as a prompt. Given a prompt, the model will generate a TextCompletion response it predicts as the completion of the input text.",
          "$ref": "TextPrompt"
        },
        "candidateCount": {
          "type": "integer",
          "format": "int32",
          "description": "Optional. Number of generated responses to return. This value must be between [1, 8], inclusive. If unset, this will default to 1."
        },
        "stopSequences": {
          "description": "The set of character sequences (up to 5) that will stop output generation. If specified, the API will stop at the first appearance of a stop sequence. The stop sequence will not be included as part of the response.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "safetySettings": {
          "type": "array",
          "items": {
            "$ref": "SafetySetting"
          },
          "description": "Optional. A list of unique `SafetySetting` instances for blocking unsafe content. that will be enforced on the `GenerateTextRequest.prompt` and `GenerateTextResponse.candidates`. There should not be more than one setting for each `SafetyCategory` type. The API will block any prompts and responses that fail to meet the thresholds set by these settings. This list overrides the default settings for each `SafetyCategory` specified in the safety_settings. If there is no `SafetySetting` for a given `SafetyCategory` provided in the list, the API will use the default safety setting for that category. Harm categories HARM_CATEGORY_DEROGATORY, HARM_CATEGORY_TOXICITY, HARM_CATEGORY_VIOLENCE, HARM_CATEGORY_SEXUAL, HARM_CATEGORY_MEDICAL, HARM_CATEGORY_DANGEROUS are supported in text service."
        },
        "topK": {
          "description": "Optional. The maximum number of tokens to consider when sampling. The model uses combined Top-k and nucleus sampling. Top-k sampling considers the set of `top_k` most probable tokens. Defaults to 40. Note: The default value varies by model, see the `Model.top_k` attribute of the `Model` returned the `getModel` function.",
          "format": "int32",
          "type": "integer"
        },
        "temperature": {
          "format": "float",
          "type": "number",
          "description": "Optional. Controls the randomness of the output. Note: The default value varies by model, see the `Model.temperature` attribute of the `Model` returned the `getModel` function. Values can range from [0.0,1.0], inclusive. A value closer to 1.0 will produce responses that are more varied and creative, while a value closer to 0.0 will typically result in more straightforward responses from the model."
        }
      },
      "description": "Request to generate a text completion response from the model.",
      "id": "GenerateTextRequest"
    },
    "Embedding": {
      "type": "object",
      "description": "A list of floats representing the embedding.",
      "properties": {
        "value": {
          "items": {
            "type": "number",
            "format": "float"
          },
          "description": "The embedding values.",
          "type": "array"
        }
      },
      "id": "Embedding"
    },
    "SafetySetting": {
      "type": "object",
      "description": "Safety setting, affecting the safety-blocking behavior. Passing a safety setting for a category changes the allowed probability that content is blocked.",
      "properties": {
        "category": {
          "enum": [
            "HARM_CATEGORY_UNSPECIFIED",
            "HARM_CATEGORY_DEROGATORY",
            "HARM_CATEGORY_TOXICITY",
            "HARM_CATEGORY_VIOLENCE",
            "HARM_CATEGORY_SEXUAL",
            "HARM_CATEGORY_MEDICAL",
            "HARM_CATEGORY_DANGEROUS",
            "HARM_CATEGORY_HARASSMENT",
            "HARM_CATEGORY_HATE_SPEECH",
            "HARM_CATEGORY_SEXUALLY_EXPLICIT",
            "HARM_CATEGORY_DANGEROUS_CONTENT",
            "HARM_CATEGORY_CIVIC_INTEGRITY"
          ],
          "enumDeprecated": [
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            true
          ],
          "enumDescriptions": [
            "Category is unspecified.",
            "**PaLM** - Negative or harmful comments targeting identity and/or protected attribute.",
            "**PaLM** - Content that is rude, disrespectful, or profane.",
            "**PaLM** - Describes scenarios depicting violence against an individual or group, or general descriptions of gore.",
            "**PaLM** - Contains references to sexual acts or other lewd content.",
            "**PaLM** - Promotes unchecked medical advice.",
            "**PaLM** - Dangerous content that promotes, facilitates, or encourages harmful acts.",
            "**Gemini** - Harassment content.",
            "**Gemini** - Hate speech and content.",
            "**Gemini** - Sexually explicit content.",
            "**Gemini** - Dangerous content.",
            "**Gemini** - Content that may be used to harm civic integrity. DEPRECATED: use enable_enhanced_civic_answers instead."
          ],
          "type": "string",
          "description": "Required. The category for this setting."
        },
        "threshold": {
          "enumDescriptions": [
            "Threshold is unspecified.",
            "Content with NEGLIGIBLE will be allowed.",
            "Content with NEGLIGIBLE and LOW will be allowed.",
            "Content with NEGLIGIBLE, LOW, and MEDIUM will be allowed.",
            "All content will be allowed.",
            "Turn off the safety filter."
          ],
          "description": "Required. Controls the probability threshold at which harm is blocked.",
          "enum": [
            "HARM_BLOCK_THRESHOLD_UNSPECIFIED",
            "BLOCK_LOW_AND_ABOVE",
            "BLOCK_MEDIUM_AND_ABOVE",
            "BLOCK_ONLY_HIGH",
            "BLOCK_NONE",
            "OFF"
          ],
          "type": "string"
        }
      },
      "id": "SafetySetting"
    },
    "RetrievedContext": {
      "type": "object",
      "properties": {
        "text": {
          "description": "Optional. Text of the chunk.",
          "type": "string"
        },
        "title": {
          "type": "string",
          "description": "Optional. Title of the document."
        },
        "uri": {
          "description": "Optional. URI reference of the semantic retrieval document.",
          "type": "string"
        }
      },
      "id": "RetrievedContext",
      "description": "Chunk from context retrieved by the file search tool."
    },
    "VoiceConfig": {
      "properties": {
        "prebuiltVoiceConfig": {
          "description": "The configuration for the prebuilt voice to use.",
          "$ref": "PrebuiltVoiceConfig"
        }
      },
      "description": "The configuration for the voice to use.",
      "id": "VoiceConfig",
      "type": "object"
    },
    "ListChunksResponse": {
      "description": "Response from `ListChunks` containing a paginated list of `Chunk`s. The `Chunk`s are sorted by ascending `chunk.create_time`.",
      "id": "ListChunksResponse",
      "type": "object",
      "properties": {
        "chunks": {
          "description": "The returned `Chunk`s.",
          "type": "array",
          "items": {
            "$ref": "Chunk"
          }
        },
        "nextPageToken": {
          "description": "A token, which can be sent as `page_token` to retrieve the next page. If this field is omitted, there are no more pages.",
          "type": "string"
        }
      }
    },
    "CitationMetadata": {
      "type": "object",
      "properties": {
        "citationSources": {
          "items": {
            "$ref": "CitationSource"
          },
          "description": "Citations to sources for a specific response.",
          "type": "array"
        }
      },
      "id": "CitationMetadata",
      "description": "A collection of source attributions for a piece of content."
    },
    "CachedContentUsageMetadata": {
      "id": "CachedContentUsageMetadata",
      "properties": {
        "totalTokenCount": {
          "description": "Total number of tokens that the cached content consumes.",
          "format": "int32",
          "type": "integer"
        }
      },
      "description": "Metadata on the usage of the cached content.",
      "type": "object"
    },
    "ChunkingConfig": {
      "id": "ChunkingConfig",
      "type": "object",
      "properties": {
        "whiteSpaceConfig": {
          "description": "White space chunking configuration.",
          "$ref": "WhiteSpaceConfig"
        }
      },
      "description": "Parameters for telling the service how to chunk the file. inspired by google3/cloud/ai/platform/extension/lib/retrieval/config/chunker_config.proto"
    },
    "FunctionCall": {
      "id": "FunctionCall",
      "properties": {
        "name": {
          "type": "string",
          "description": "Required. The name of the function to call. Must be a-z, A-Z, 0-9, or contain underscores and dashes, with a maximum length of 64."
        },
        "args": {
          "type": "object",
          "description": "Optional. The function parameters and values in JSON object format.",
          "additionalProperties": {
            "description": "Properties of the object.",
            "type": "any"
          }
        },
        "id": {
          "type": "string",
          "description": "Optional. The unique id of the function call. If populated, the client to execute the `function_call` and return the response with the matching `id`."
        }
      },
      "description": "A predicted `FunctionCall` returned from the model that contains a string representing the `FunctionDeclaration.name` with the arguments and their values.",
      "type": "object"
    },
    "ListDocumentsResponse": {
      "id": "ListDocumentsResponse",
      "description": "Response from `ListDocuments` containing a paginated list of `Document`s. The `Document`s are sorted by ascending `document.create_time`.",
      "properties": {
        "nextPageToken": {
          "type": "string",
          "description": "A token, which can be sent as `page_token` to retrieve the next page. If this field is omitted, there are no more pages."
        },
        "documents": {
          "items": {
            "$ref": "Document"
          },
          "description": "The returned `Document`s.",
          "type": "array"
        }
      },
      "type": "object"
    },
    "GeneratedFile": {
      "id": "GeneratedFile",
      "type": "object",
      "properties": {
        "name": {
          "description": "Identifier. The name of the generated file. Example: `generatedFiles/abc-123`",
          "type": "string"
        },
        "error": {
          "description": "Error details if the GeneratedFile ends up in the STATE_FAILED state.",
          "$ref": "Status"
        },
        "mimeType": {
          "description": "MIME type of the generatedFile.",
          "type": "string"
        },
        "state": {
          "enum": [
            "STATE_UNSPECIFIED",
            "GENERATING",
            "GENERATED",
            "FAILED"
          ],
          "type": "string",
          "description": "Output only. The state of the GeneratedFile.",
          "readOnly": true,
          "enumDescriptions": [
            "The default value. This value is used if the state is omitted.",
            "Being generated.",
            "Generated and is ready for download.",
            "Failed to generate the GeneratedFile."
          ]
        }
      },
      "description": "A file generated on behalf of a user."
    },
    "UpdateChunkRequest": {
      "type": "object",
      "properties": {
        "chunk": {
          "description": "Required. The `Chunk` to update.",
          "$ref": "Chunk"
        },
        "updateMask": {
          "description": "Required. The list of fields to update. Currently, this only supports updating `custom_metadata` and `data`.",
          "format": "google-fieldmask",
          "type": "string"
        }
      },
      "id": "UpdateChunkRequest",
      "description": "Request to update a `Chunk`."
    },
    "GroundingSupport": {
      "type": "object",
      "description": "Grounding support.",
      "id": "GroundingSupport",
      "properties": {
        "confidenceScores": {
          "description": "Confidence score of the support references. Ranges from 0 to 1. 1 is the most confident. This list must have the same size as the grounding_chunk_indices.",
          "items": {
            "format": "float",
            "type": "number"
          },
          "type": "array"
        },
        "groundingChunkIndices": {
          "items": {
            "format": "int32",
            "type": "integer"
          },
          "type": "array",
          "description": "A list of indices (into 'grounding_chunk') specifying the citations associated with the claim. For instance [1,3,4] means that grounding_chunk[1], grounding_chunk[3], grounding_chunk[4] are the retrieved content attributed to the claim."
        },
        "segment": {
          "description": "Segment of the content this support belongs to.",
          "$ref": "Segment"
        }
      }
    },
    "InlinedRequest": {
      "properties": {
        "request": {
          "description": "Required. The request to be processed in the batch.",
          "$ref": "GenerateContentRequest"
        },
        "metadata": {
          "description": "Optional. The metadata to be associated with the request.",
          "type": "object",
          "additionalProperties": {
            "type": "any",
            "description": "Properties of the object."
          }
        }
      },
      "type": "object",
      "description": "The request to be processed in the batch.",
      "id": "InlinedRequest"
    },
    "CachedContent": {
      "description": "Content that has been preprocessed and can be used in subsequent request to GenerativeService. Cached content can be only used with model it was created for.",
      "type": "object",
      "properties": {
        "tools": {
          "items": {
            "$ref": "Tool"
          },
          "type": "array",
          "description": "Optional. Input only. Immutable. A list of `Tools` the model may use to generate the next response"
        },
        "toolConfig": {
          "description": "Optional. Input only. Immutable. Tool config. This config is shared for all tools.",
          "$ref": "ToolConfig"
        },
        "createTime": {
          "format": "google-datetime",
          "type": "string",
          "description": "Output only. Creation time of the cache entry.",
          "readOnly": true
        },
        "expireTime": {
          "type": "string",
          "description": "Timestamp in UTC of when this resource is considered expired. This is *always* provided on output, regardless of what was sent on input.",
          "format": "google-datetime"
        },
        "contents": {
          "items": {
            "$ref": "Content"
          },
          "type": "array",
          "description": "Optional. Input only. Immutable. The content to cache."
        },
        "ttl": {
          "description": "Input only. New TTL for this resource, input only.",
          "type": "string",
          "format": "google-duration"
        },
        "updateTime": {
          "type": "string",
          "readOnly": true,
          "format": "google-datetime",
          "description": "Output only. When the cache entry was last updated in UTC time."
        },
        "name": {
          "type": "string",
          "description": "Output only. Identifier. The resource name referring to the cached content. Format: `cachedContents/{id}`",
          "readOnly": true
        },
        "model": {
          "type": "string",
          "description": "Required. Immutable. The name of the `Model` to use for cached content Format: `models/{model}`"
        },
        "usageMetadata": {
          "description": "Output only. Metadata on the usage of the cached content.",
          "readOnly": true,
          "$ref": "CachedContentUsageMetadata"
        },
        "systemInstruction": {
          "description": "Optional. Input only. Immutable. Developer set system instruction. Currently text only.",
          "$ref": "Content"
        },
        "displayName": {
          "description": "Optional. Immutable. The user-generated meaningful display name of the cached content. Maximum 128 Unicode characters.",
          "type": "string"
        }
      },
      "id": "CachedContent"
    },
    "EmbedContentBatch": {
      "description": "A resource representing a batch of `EmbedContent` requests.",
      "properties": {
        "endTime": {
          "type": "string",
          "readOnly": true,
          "format": "google-datetime",
          "description": "Output only. The time at which the batch processing completed."
        },
        "displayName": {
          "type": "string",
          "description": "Required. The user-defined name of this batch."
        },
        "name": {
          "readOnly": true,
          "description": "Output only. Identifier. Resource name of the batch. Format: `batches/{batch_id}`.",
          "type": "string"
        },
        "model": {
          "description": "Required. The name of the `Model` to use for generating the completion. Format: `models/{model}`.",
          "type": "string"
        },
        "output": {
          "description": "Output only. The output of the batch request.",
          "readOnly": true,
          "$ref": "EmbedContentBatchOutput"
        },
        "updateTime": {
          "type": "string",
          "format": "google-datetime",
          "readOnly": true,
          "description": "Output only. The time at which the batch was last updated."
        },
        "inputConfig": {
          "$ref": "InputEmbedContentConfig",
          "description": "Required. Input configuration of the instances on which batch processing are performed."
        },
        "createTime": {
          "type": "string",
          "description": "Output only. The time at which the batch was created.",
          "readOnly": true,
          "format": "google-datetime"
        },
        "priority": {
          "format": "int64",
          "description": "Optional. The priority of the batch. Batches with a higher priority value will be processed before batches with a lower priority value. Negative values are allowed. Default is 0.",
          "type": "string"
        },
        "batchStats": {
          "description": "Output only. Stats about the batch.",
          "readOnly": true,
          "$ref": "EmbedContentBatchStats"
        },
        "state": {
          "description": "Output only. The state of the batch.",
          "enum": [
            "BATCH_STATE_UNSPECIFIED",
            "BATCH_STATE_PENDING",
            "BATCH_STATE_RUNNING",
            "BATCH_STATE_SUCCEEDED",
            "BATCH_STATE_FAILED",
            "BATCH_STATE_CANCELLED",
            "BATCH_STATE_EXPIRED"
          ],
          "enumDescriptions": [
            "The batch state is unspecified.",
            "The service is preparing to run the batch.",
            "The batch is in progress.",
            "The batch completed successfully.",
            "The batch failed.",
            "The batch has been cancelled.",
            "The batch has expired."
          ],
          "type": "string",
          "readOnly": true
        }
      },
      "type": "object",
      "id": "EmbedContentBatch"
    },
    "Tool": {
      "id": "Tool",
      "properties": {
        "fileSearch": {
          "$ref": "FileSearch",
          "description": "Optional. FileSearch tool type. Tool to retrieve knowledge from Semantic Retrieval corpora."
        },
        "googleSearch": {
          "description": "Optional. GoogleSearch tool type. Tool to support Google Search in Model. Powered by Google.",
          "$ref": "GoogleSearch"
        },
        "codeExecution": {
          "description": "Optional. Enables the model to execute code as part of generation.",
          "$ref": "CodeExecution"
        },
        "googleSearchRetrieval": {
          "$ref": "GoogleSearchRetrieval",
          "description": "Optional. Retrieval tool that is powered by Google search."
        },
        "functionDeclarations": {
          "description": "Optional. A list of `FunctionDeclarations` available to the model that can be used for function calling. The model or system does not execute the function. Instead the defined function may be returned as a FunctionCall with arguments to the client side for execution. The model may decide to call a subset of these functions by populating FunctionCall in the response. The next conversation turn may contain a FunctionResponse with the Content.role \"function\" generation context for the next model turn.",
          "items": {
            "$ref": "FunctionDeclaration"
          },
          "type": "array"
        },
        "computerUse": {
          "description": "Optional. Tool to support the model interacting directly with the computer. If enabled, it automatically populates computer-use specific Function Declarations.",
          "$ref": "ComputerUse"
        },
        "googleMaps": {
          "$ref": "GoogleMaps",
          "description": "Optional. Tool that allows grounding the model's response with geospatial context related to the user's query."
        },
        "urlContext": {
          "description": "Optional. Tool to support URL context retrieval.",
          "$ref": "UrlContext"
        }
      },
      "description": "Tool details that the model may use to generate response. A `Tool` is a piece of code that enables the system to interact with external systems to perform an action, or set of actions, outside of knowledge and scope of the model. Next ID: 12",
      "type": "object"
    },
    "ThinkingConfig": {
      "type": "object",
      "description": "Config for thinking features.",
      "id": "ThinkingConfig",
      "properties": {
        "includeThoughts": {
          "type": "boolean",
          "description": "Indicates whether to include thoughts in the response. If true, thoughts are returned only when available."
        },
        "thinkingBudget": {
          "format": "int32",
          "type": "integer",
          "description": "The number of thoughts tokens that the model should generate."
        }
      }
    },
    "GenerateMessageResponse": {
      "type": "object",
      "properties": {
        "candidates": {
          "items": {
            "$ref": "Message"
          },
          "description": "Candidate response messages from the model.",
          "type": "array"
        },
        "filters": {
          "items": {
            "$ref": "ContentFilter"
          },
          "type": "array",
          "description": "A set of content filtering metadata for the prompt and response text. This indicates which `SafetyCategory`(s) blocked a candidate from this response, the lowest `HarmProbability` that triggered a block, and the HarmThreshold setting for that category."
        },
        "messages": {
          "type": "array",
          "items": {
            "$ref": "Message"
          },
          "description": "The conversation history used by the model."
        }
      },
      "id": "GenerateMessageResponse",
      "description": "The response from the model. This includes candidate messages and conversation history in the form of chronologically-ordered messages."
    },
    "GroundingChunk": {
      "type": "object",
      "description": "Grounding chunk.",
      "properties": {
        "web": {
          "description": "Grounding chunk from the web.",
          "$ref": "Web"
        },
        "maps": {
          "description": "Optional. Grounding chunk from Google Maps.",
          "$ref": "Maps"
        },
        "retrievedContext": {
          "description": "Optional. Grounding chunk from context retrieved by the file search tool.",
          "$ref": "RetrievedContext"
        }
      },
      "id": "GroundingChunk"
    },
    "TopCandidates": {
      "properties": {
        "candidates": {
          "type": "array",
          "description": "Sorted by log probability in descending order.",
          "items": {
            "$ref": "LogprobsResultCandidate"
          }
        }
      },
      "description": "Candidates with top log probabilities at each decoding step.",
      "type": "object",
      "id": "TopCandidates"
    },
    "Condition": {
      "properties": {
        "operation": {
          "enum": [
            "OPERATOR_UNSPECIFIED",
            "LESS",
            "LESS_EQUAL",
            "EQUAL",
            "GREATER_EQUAL",
            "GREATER",
            "NOT_EQUAL",
            "INCLUDES",
            "EXCLUDES"
          ],
          "type": "string",
          "enumDescriptions": [
            "The default value. This value is unused.",
            "Supported by numeric.",
            "Supported by numeric.",
            "Supported by numeric & string.",
            "Supported by numeric.",
            "Supported by numeric.",
            "Supported by numeric & string.",
            "Supported by string only when `CustomMetadata` value type for the given key has a `string_list_value`.",
            "Supported by string only when `CustomMetadata` value type for the given key has a `string_list_value`."
          ],
          "description": "Required. Operator applied to the given key-value pair to trigger the condition."
        },
        "numericValue": {
          "format": "float",
          "type": "number",
          "description": "The numeric value to filter the metadata on."
        },
        "stringValue": {
          "type": "string",
          "description": "The string value to filter the metadata on."
        }
      },
      "id": "Condition",
      "type": "object",
      "description": "Filter condition applicable to a single key."
    },
    "CreateChunkRequest": {
      "properties": {
        "parent": {
          "description": "Required. The name of the `Document` where this `Chunk` will be created. Example: `corpora/my-corpus-123/documents/the-doc-abc`",
          "type": "string"
        },
        "chunk": {
          "description": "Required. The `Chunk` to create.",
          "$ref": "Chunk"
        }
      },
      "type": "object",
      "description": "Request to create a `Chunk`.",
      "id": "CreateChunkRequest"
    },
    "InlinedEmbedContentResponses": {
      "type": "object",
      "id": "InlinedEmbedContentResponses",
      "description": "The responses to the requests in the batch.",
      "properties": {
        "inlinedResponses": {
          "description": "Output only. The responses to the requests in the batch.",
          "readOnly": true,
          "type": "array",
          "items": {
            "$ref": "InlinedEmbedContentResponse"
          }
        }
      }
    },
    "BatchUpdateChunksResponse": {
      "properties": {
        "chunks": {
          "items": {
            "$ref": "Chunk"
          },
          "type": "array",
          "description": "`Chunk`s updated."
        }
      },
      "type": "object",
      "description": "Response from `BatchUpdateChunks` containing a list of updated `Chunk`s.",
      "id": "BatchUpdateChunksResponse"
    },
    "Segment": {
      "type": "object",
      "properties": {
        "endIndex": {
          "description": "Output only. End index in the given Part, measured in bytes. Offset from the start of the Part, exclusive, starting at zero.",
          "readOnly": true,
          "type": "integer",
          "format": "int32"
        },
        "text": {
          "description": "Output only. The text corresponding to the segment from the response.",
          "readOnly": true,
          "type": "string"
        },
        "partIndex": {
          "format": "int32",
          "type": "integer",
          "readOnly": true,
          "description": "Output only. The index of a Part object within its parent Content object."
        },
        "startIndex": {
          "readOnly": true,
          "format": "int32",
          "description": "Output only. Start index in the given Part, measured in bytes. Offset from the start of the Part, inclusive, starting at zero.",
          "type": "integer"
        }
      },
      "id": "Segment",
      "description": "Segment of the content."
    },
    "WhiteSpaceConfig": {
      "type": "object",
      "id": "WhiteSpaceConfig",
      "description": "Configuration for a white space chunking algorithm [white space delimited].",
      "properties": {
        "maxTokensPerChunk": {
          "format": "int32",
          "description": "Maximum number of tokens per chunk. Tokens are defined as words for this chunking algorithm. Note: we are defining tokens as words split by whitespace as opposed to the output of a tokenizer. The context window of the latest gemini embedding model as of 2025-04-17 is currently 8192 tokens. We assume that the average word is 5 characters. Therefore, we set the upper limit to 2**9, which is 512 words, or 2560 tokens, assuming worst case a character per token. This is a conservative estimate meant to prevent context window overflow.",
          "type": "integer"
        },
        "maxOverlapTokens": {
          "description": "Maximum number of overlapping tokens between two adjacent chunks.",
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "GoogleSearchRetrieval": {
      "properties": {
        "dynamicRetrievalConfig": {
          "description": "Specifies the dynamic retrieval configuration for the given source.",
          "$ref": "DynamicRetrievalConfig"
        }
      },
      "type": "object",
      "description": "Tool to retrieve public web data for grounding, powered by Google.",
      "id": "GoogleSearchRetrieval"
    },
    "BatchGenerateContentRequest": {
      "id": "BatchGenerateContentRequest",
      "type": "object",
      "description": "Request for a `BatchGenerateContent` operation.",
      "properties": {
        "batch": {
          "$ref": "GenerateContentBatch",
          "description": "Required. The batch to create."
        }
      }
    },
    "SemanticRetrieverChunk": {
      "description": "Identifier for a `Chunk` retrieved via Semantic Retriever specified in the `GenerateAnswerRequest` using `SemanticRetrieverConfig`.",
      "type": "object",
      "properties": {
        "chunk": {
          "description": "Output only. Name of the `Chunk` containing the attributed text. Example: `corpora/123/documents/abc/chunks/xyz`",
          "type": "string",
          "readOnly": true
        },
        "source": {
          "description": "Output only. Name of the source matching the request's `SemanticRetrieverConfig.source`. Example: `corpora/123` or `corpora/123/documents/abc`",
          "readOnly": true,
          "type": "string"
        }
      },
      "id": "SemanticRetrieverChunk"
    },
    "ContentFilter": {
      "description": "Content filtering metadata associated with processing a single request. ContentFilter contains a reason and an optional supporting string. The reason may be unspecified.",
      "properties": {
        "reason": {
          "enumDescriptions": [
            "A blocked reason was not specified.",
            "Content was blocked by safety settings.",
            "Content was blocked, but the reason is uncategorized."
          ],
          "type": "string",
          "description": "The reason content was blocked during request processing.",
          "enum": [
            "BLOCKED_REASON_UNSPECIFIED",
            "SAFETY",
            "OTHER"
          ]
        },
        "message": {
          "type": "string",
          "description": "A string that describes the filtering behavior in more detail."
        }
      },
      "type": "object",
      "id": "ContentFilter"
    },
    "SpeakerVoiceConfig": {
      "description": "The configuration for a single speaker in a multi speaker setup.",
      "properties": {
        "voiceConfig": {
          "description": "Required. The configuration for the voice to use.",
          "$ref": "VoiceConfig"
        },
        "speaker": {
          "type": "string",
          "description": "Required. The name of the speaker to use. Should be the same as in the prompt."
        }
      },
      "id": "SpeakerVoiceConfig",
      "type": "object"
    },
    "FileSearch": {
      "description": "The FileSearch tool that retrieves knowledge from Semantic Retrieval corpora. Files are imported to Semantic Retrieval corpora using the ImportFile API.",
      "id": "FileSearch",
      "type": "object",
      "properties": {
        "retrievalResources": {
          "items": {
            "$ref": "RetrievalResource"
          },
          "description": "Required. Semantic retrieval resources to retrieve from. Currently only supports one corpus. In the future we may open up multiple corpora support.",
          "type": "array"
        },
        "retrievalConfig": {
          "$ref": "FileSearchRetrievalConfig",
          "description": "Optional. The configuration for the retrieval."
        }
      }
    },
    "PlaceAnswerSources": {
      "id": "PlaceAnswerSources",
      "properties": {
        "reviewSnippets": {
          "items": {
            "$ref": "ReviewSnippet"
          },
          "description": "Snippets of reviews that are used to generate answers about the features of a given place in Google Maps.",
          "type": "array"
        }
      },
      "type": "object",
      "description": "Collection of sources that provide answers about the features of a given place in Google Maps. Each PlaceAnswerSources message corresponds to a specific place in Google Maps. The Google Maps tool used these sources in order to answer questions about features of the place (e.g: \"does Bar Foo have Wifi\" or \"is Foo Bar wheelchair accessible?\"). Currently we only support review snippets as sources."
    },
    "InlinedResponse": {
      "id": "InlinedResponse",
      "properties": {
        "error": {
          "$ref": "Status",
          "readOnly": true,
          "description": "Output only. The error encountered while processing the request."
        },
        "metadata": {
          "type": "object",
          "readOnly": true,
          "description": "Output only. The metadata associated with the request.",
          "additionalProperties": {
            "description": "Properties of the object.",
            "type": "any"
          }
        },
        "response": {
          "readOnly": true,
          "$ref": "GenerateContentResponse",
          "description": "Output only. The response to the request."
        }
      },
      "type": "object",
      "description": "The response to a single request in the batch."
    },
    "SafetyRating": {
      "description": "Safety rating for a piece of content. The safety rating contains the category of harm and the harm probability level in that category for a piece of content. Content is classified for safety across a number of harm categories and the probability of the harm classification is included here.",
      "id": "SafetyRating",
      "type": "object",
      "properties": {
        "category": {
          "description": "Required. The category for this rating.",
          "enumDeprecated": [
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            true
          ],
          "type": "string",
          "enumDescriptions": [
            "Category is unspecified.",
            "**PaLM** - Negative or harmful comments targeting identity and/or protected attribute.",
            "**PaLM** - Content that is rude, disrespectful, or profane.",
            "**PaLM** - Describes scenarios depicting violence against an individual or group, or general descriptions of gore.",
            "**PaLM** - Contains references to sexual acts or other lewd content.",
            "**PaLM** - Promotes unchecked medical advice.",
            "**PaLM** - Dangerous content that promotes, facilitates, or encourages harmful acts.",
            "**Gemini** - Harassment content.",
            "**Gemini** - Hate speech and content.",
            "**Gemini** - Sexually explicit content.",
            "**Gemini** - Dangerous content.",
            "**Gemini** - Content that may be used to harm civic integrity. DEPRECATED: use enable_enhanced_civic_answers instead."
          ],
          "enum": [
            "HARM_CATEGORY_UNSPECIFIED",
            "HARM_CATEGORY_DEROGATORY",
            "HARM_CATEGORY_TOXICITY",
            "HARM_CATEGORY_VIOLENCE",
            "HARM_CATEGORY_SEXUAL",
            "HARM_CATEGORY_MEDICAL",
            "HARM_CATEGORY_DANGEROUS",
            "HARM_CATEGORY_HARASSMENT",
            "HARM_CATEGORY_HATE_SPEECH",
            "HARM_CATEGORY_SEXUALLY_EXPLICIT",
            "HARM_CATEGORY_DANGEROUS_CONTENT",
            "HARM_CATEGORY_CIVIC_INTEGRITY"
          ]
        },
        "blocked": {
          "description": "Was this content blocked because of this rating?",
          "type": "boolean"
        },
        "probability": {
          "type": "string",
          "enumDescriptions": [
            "Probability is unspecified.",
            "Content has a negligible chance of being unsafe.",
            "Content has a low chance of being unsafe.",
            "Content has a medium chance of being unsafe.",
            "Content has a high chance of being unsafe."
          ],
          "description": "Required. The probability of harm for this content.",
          "enum": [
            "HARM_PROBABILITY_UNSPECIFIED",
            "NEGLIGIBLE",
            "LOW",
            "MEDIUM",
            "HIGH"
          ]
        }
      }
    },
    "UrlContext": {
      "type": "object",
      "properties": {},
      "id": "UrlContext",
      "description": "Tool to support URL context retrieval."
    },
    "GroundingPassage": {
      "id": "GroundingPassage",
      "type": "object",
      "description": "Passage included inline with a grounding configuration.",
      "properties": {
        "id": {
          "description": "Identifier for the passage for attributing this passage in grounded answers.",
          "type": "string"
        },
        "content": {
          "$ref": "Content",
          "description": "Content of the passage."
        }
      }
    },
    "GenerateMessageRequest": {
      "description": "Request to generate a message response from the model.",
      "properties": {
        "candidateCount": {
          "type": "integer",
          "description": "Optional. The number of generated response messages to return. This value must be between `[1, 8]`, inclusive. If unset, this will default to `1`.",
          "format": "int32"
        },
        "prompt": {
          "description": "Required. The structured textual input given to the model as a prompt. Given a prompt, the model will return what it predicts is the next message in the discussion.",
          "$ref": "MessagePrompt"
        },
        "topP": {
          "type": "number",
          "format": "float",
          "description": "Optional. The maximum cumulative probability of tokens to consider when sampling. The model uses combined Top-k and nucleus sampling. Nucleus sampling considers the smallest set of tokens whose probability sum is at least `top_p`."
        },
        "topK": {
          "description": "Optional. The maximum number of tokens to consider when sampling. The model uses combined Top-k and nucleus sampling. Top-k sampling considers the set of `top_k` most probable tokens.",
          "type": "integer",
          "format": "int32"
        },
        "temperature": {
          "format": "float",
          "type": "number",
          "description": "Optional. Controls the randomness of the output. Values can range over `[0.0,1.0]`, inclusive. A value closer to `1.0` will produce responses that are more varied, while a value closer to `0.0` will typically result in less surprising responses from the model."
        }
      },
      "type": "object",
      "id": "GenerateMessageRequest"
    },
    "CodeExecution": {
      "id": "CodeExecution",
      "properties": {},
      "description": "Tool that executes code generated by the model, and automatically returns the result to the model. See also `ExecutableCode` and `CodeExecutionResult` which are only generated when using this tool.",
      "type": "object"
    },
    "ListModelsResponse": {
      "id": "ListModelsResponse",
      "properties": {
        "models": {
          "items": {
            "$ref": "Model"
          },
          "type": "array",
          "description": "The returned Models."
        },
        "nextPageToken": {
          "type": "string",
          "description": "A token, which can be sent as `page_token` to retrieve the next page. If this field is omitted, there are no more pages."
        }
      },
      "type": "object",
      "description": "Response from `ListModel` containing a paginated list of Models."
    },
    "RetrievalMetadata": {
      "type": "object",
      "properties": {
        "googleSearchDynamicRetrievalScore": {
          "format": "float",
          "description": "Optional. Score indicating how likely information from google search could help answer the prompt. The score is in the range [0, 1], where 0 is the least likely and 1 is the most likely. This score is only populated when google search grounding and dynamic retrieval is enabled. It will be compared to the threshold to determine whether to trigger google search.",
          "type": "number"
        }
      },
      "id": "RetrievalMetadata",
      "description": "Metadata related to retrieval in the grounding flow."
    },
    "Empty": {
      "id": "Empty",
      "description": "A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A typical example is to use it as the request or the response type of an API method. For instance: service Foo { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty); }",
      "properties": {},
      "type": "object"
    }
  }
}